import axios from 'axios'
import { env } from 'config/environtment'
import { result } from 'lodash'

import { Configuration, OpenAIApi } from 'openai'


const handleItineraryRequest = async (content, io, socketIdMap, currentUserId) => {
  console.log('üöÄ ~ file: ChatGptProvider.js:8 ~ handleItineraryRequest ~ currentUserId:', currentUserId)
  console.log('üöÄ ~ file: ChatGptProvider.js:8 ~ handleItineraryRequest ~ socketIdMap:', socketIdMap)
  console.log('üöÄ ~ file: ChatGptProvider.js:8 ~ handleItineraryRequest ~ io:', io)
  console.log('üöÄ ~ file: ChatGptProvider.js:8 ~ handleItineraryRequest ~ content:', content)
  try {
    const configuration = new Configuration({
      apiKey: env.CHATGPT_API_KEY
    })

    const openai = new OpenAIApi(configuration)

    const completion = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo', // Ch·ªçn model ph√π h·ª£p
      messages: [{ role: 'user', content: content }], // c·∫•u h√¨nh role v√† content m√¨nh mu·ªën h·ªèi
      temperature: 0, // ƒê·∫ßu ra t·∫≠p trung v√†o v√†o c√¢u h·ªèi nhi·ªÅu h∆°n
      stream: true // N√≥ s·∫Ω tr·∫£ d·ªØ li·ªáu v·ªÅ theo t·ª´ng ƒë·ªçt
    }, {
      responseType: 'stream'
    })
    let messageReturn = ''
    const isStop = false
    completion.data.on('data', (data) => {
      const lines = data
        ?.toString()
        ?.split('\n')
        .filter((line) => line.trim() !== '')
      for (const line of lines) {
        const message = line.replace(/^data: /, '')
        if (message === '[DONE]') {
          io.to(socketIdMap[currentUserId]).emit('s_create_travel_itinerary', {
            messageReturn: 'DONE'
          })
          break // Stream finished
        }
        try {
          const parsed = JSON.parse(message)
          if (parsed.choices[0].delta.content) {
            messageReturn += parsed.choices[0].delta.content
            // console.log(messageReturn)
          }
        } catch (error) {
          console.error('Could not JSON parse stream message', message, error)
        }
      }

      if (isStop) {
        clearInterval(intervalId)
      }

    })

    const intervalId = setInterval(() => {
      if (!isStop) {
        console.log('üöÄ ~ file: ChatGptProvider.js:65 ~ io.to ~ messageReturn:', messageReturn)
        io.to(socketIdMap[currentUserId]).emit('s_create_travel_itinerary', {
          messageReturn: messageReturn
        })
      }
    }, 500)
  } catch (error) {
    console.log(error)
  }
}

const handleItineraryCreate = async (question, travelPlaces, fnbPlaces, io, socketIdMap, currentUserId) => {
  console.log('üöÄ ~ file: ChatGptProvider.js:62 ~ handleItineraryCreate ~ currentUserId:', currentUserId)
  console.log('üöÄ ~ file: ChatGptProvider.js:62 ~ handleItineraryCreate ~ socketIdMap:', socketIdMap)
  console.log('üöÄ ~ file: ChatGptProvider.js:62 ~ handleItineraryCreate ~ io:', io)
  console.log('üöÄ ~ file: ChatGptProvider.js:62 ~ handleItineraryCreate ~ fnbPlaces:', fnbPlaces)
  console.log('üöÄ ~ file: ChatGptProvider.js:62 ~ handleItineraryCreate ~ travelPlaces:', travelPlaces)
  console.log('üöÄ ~ file: ChatGptProvider.js:62 ~ handleItineraryCreate ~ question:', question)

  try {
    const configuration = new Configuration({
      apiKey: env.CHATGPT_API_KEY
    })

    const openai = new OpenAIApi(configuration)

    const completion = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo', // Ch·ªçn model ph√π h·ª£p
      messages: [
        {
          role: 'system',
          content: `As a smart itinerary planner with extensive knowledge of places around the world, your task is to determine the user's travel destinations and any specific interests or preferences from their message. Create an itinerary that caters to the user's needs, making sure to name all activities, restaurants, and attractions specifically. When creating the itinerary, also consider factors such as time constraints and transportation options. Additionally, all attractions and restaurants listed in the itinerary must exist and be named specifically. During subsequent revisions, the itinerary can be modified, while keeping in mind the practicality of the itinerary. New place for each day. It's important to ensure that the number of activities per day is appropriate, and if the user doesn't specify otherwise, the default itinerary length is five days. The itinerary length should remain the same unless there is a change by the user's message.. I have the following tourist attractions: "${travelPlaces}" and eating and drinking spots as follows "${fnbPlaces}" Plan your trip from these places. You need to format your response by adding [location] around locations and the locations must be different without repeating. Note You need to use the exact name of the places provided, do not add information to the location Please provide information every day, each period of the day as much information as possible. The default itinerary length is five days if not provided. Answer AI style in Vietnamese`
        },
        {
          role: 'user',
          content: 'T√¥i mu·ªën ƒëi V≈©ng t√†u trong 5 ng√†y. T√¥i xu·∫•t ph√°t t·ª´ th√†nh ph·ªë h·ªì ch√≠ minh. T√¥i c√≥ s·ªü th√≠ch tham quan c√°c di t√≠ch l·ªãch s·ª≠, ƒë∆∞·ª£c ƒÉn v·∫∑t, v·ªõi tham gia c√°c ho·∫°t ƒë·ªông. Ng√¢n s√°ch c·ªßa t√¥i l√† 3 tri·ªáu ƒë·ªông cho hai ng∆∞·ªùi'
        },
        // {
        //   role: 'system',
        //   content: 'Here is a possible itinerary for a 5-day trip to Mali:\n\nDay 1:\n* Fly from your home city to [Mopti Airport (MOP)|Mali] in [Mopti|Mali].\n* Take a taxi to your hotel in [Mopti|Mali].\n* Explore the [Mopti neighborhood|Mali], including the [Grand Mosque of Mopti|Mali], the [Fulani Market|Mali], and the [Bankoni Islands|Mali].\n* Have dinner at a restaurant in [Mopti|Mali], such as [Chez Fatoumata|Mali].\n\nDay 2:\n* Take a boat trip to [Djenne|Mali].\n* Visit the [Great Mosque of Djenne|Mali], a UNESCO World Heritage Site.\n* Explore the [Djenne neighborhood|Mali], including the [Djenn√© Market|Mali] and the [Djenn√© Museum|Mali].\n* Return to [Mopti|Mali] in the evening.\n\nDay 3:\n* Take a day trip to [S√©gou|Mali].\n* Visit the [S√©gou Museum|Mali], which houses a collection of artifacts from the S√©gou Empire.\n* Explore the [S√©gou neighborhood|Mali], including the [S√©gou Grand Mosque|Mali] and the [S√©gou Market|Mali].\n* Return to [Mopti|Mali] in the evening.\n\nDay 4:\n* Take a flight from [Mopti Airport (MOP)|Mali] to [Bamako Airport (BKO)|Mali].\n* Take a taxi to your hotel in [Bamako|Mali].\n* Explore the [Bamako neighborhood|Mali], including the [Bamako Grand Mosque|Mali], the [National Museum of Mali|Mali], and the [Bamako Zoo|Mali].\n* Have dinner at a restaurant in [Bamako|Mali], such as [Chez Boubacar|Mali].\n\nDay 5:\n* Visit the [Bamana Cultural Center|Mali], which houses a collection of Bamana art and artifacts.\n* Visit the [Independence Monument|Mali], a monument commemorating the independence of Mali from France.\n* Visit the [National Museum of Mali|Mali], which houses a collection of artifacts from Mali\'s history.\n* Return to your home city.\n\nThis itinerary can be customized to fit your interests and budget. For example, if you are interested in Malian history, you could add a visit to the [Mand√© Empire ruins|Mali] in [Niani|Mali]. If you are interested in Malian art, you could add a visit to the [Mus√©e National du Mali|Mali] in [Bamako|Mali]. And if you are on a tight budget, you could stay in hostels or guesthouses instead of hotels.\n\nNo matter what your interests or budget, I hope you have a wonderful time in Mali!'
        // },
        {
          role: 'system',
          content: 'D∆∞·ªõi ƒë√¢y l√† m·ªôt k·∫ø ho·∫°ch chi ti·∫øt cho chuy·∫øn ƒëi 5 ng√†y c·ªßa b·∫°n ƒë·∫øn V≈©ng T√†u:\n\nNg√†y 1:\n- S√°ng: T·ª´ th√†nh ph·ªë H·ªì Ch√≠ Minh, b·∫°n c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn V≈©ng T√†u b·∫±ng xe bu√Ωt ho·∫∑c t√†u h·ªèa. ƒê·∫øn V≈©ng T√†u, b·∫°n c√≥ th·ªÉ nh·∫≠n ph√≤ng t·∫°i kh√°ch s·∫°n c·ªßa b·∫°n.\n- Tr∆∞a: Th∆∞·ªüng th·ª©c m·ªôt b·ªØa tr∆∞a ngon t·∫°i [Nh√† h√†ng G√†nh H√†o 1], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n h·∫£i s·∫£n t∆∞∆°i s·ªëng.\n- Chi·ªÅu: Tham quan [B·∫°ch Dinh (White Palace Historical Cultural Relic)], m·ªôt di t√≠ch l·ªãch s·ª≠ quan tr·ªçng v·ªõi ki·∫øn tr√∫c Ph√°p c·ªï ƒëi·ªÉn v√† t·∫ßm nh√¨n tuy·ªát ƒë·∫πp ra bi·ªÉn.\n- T·ªëi: D·∫°o ch∆°i t·∫°i [B√£i Tr∆∞·ªõc], m·ªôt b√£i bi·ªÉn n·ªïi ti·∫øng v·ªõi c√°t tr·∫Øng v√† kh√¥ng kh√≠ trong l√†nh. B·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn v·∫∑t t·∫°i c√°c qu·∫ßy h√†ng ven bi·ªÉn.\n\nNg√†y 2:\n- S√°ng: Tham quan [H·∫£i ƒêƒÉng V≈©ng T√†u], m·ªôt bi·ªÉu t∆∞·ª£ng n·ªïi ti·∫øng c·ªßa th√†nh ph·ªë. B·∫°n c√≥ th·ªÉ leo l√™n ƒë·ªânh h·∫£i ƒëƒÉng ƒë·ªÉ ng·∫Øm to√†n c·∫£nh V≈©ng T√†u t·ª´ tr√™n cao.\n- Tr∆∞a: ƒÇn tr∆∞a t·∫°i [Nh√† h√†ng C√¢y B√†ng], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n mi·ªÅn Trung.\n- Chi·ªÅu: Tham quan [ƒê·ªìi Con Heo], m·ªôt ƒëi·ªÉm ƒë·∫øn ph·ªï bi·∫øn v·ªõi t∆∞·ª£ng ƒë√†i con heo v√† t·∫ßm nh√¨n ƒë·∫πp ra bi·ªÉn.\n- T·ªëi: Th∆∞·ªüng th·ª©c m·ªôt b·ªØa t·ªëi ngon t·∫°i [Nh√† h√†ng Ng·ªçc Dung], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n h·∫£i s·∫£n t∆∞∆°i s·ªëng.\n\nNg√†y 3:\n- S√°ng: Tham quan [Linh S∆°n C·ªï T·ª±], m·ªôt ng√¥i ch√πa c·ªï n·∫±m tr√™n ƒë·ªânh n√∫i, n∆°i b·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ ƒë·∫°o Ph·∫≠t v√† th∆∞·ªüng ngo·∫°n c·∫£nh quan xung quanh.\n- Tr∆∞a: ƒÇn tr∆∞a t·∫°i [Nh√† h√†ng h·∫£i s·∫£n L√¢m ƒê∆∞·ªùng - V≈©ng T√†u], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n h·∫£i s·∫£n t∆∞∆°i s·ªëng v·ªõi gi√° ph·∫£i chƒÉng.\n- Chi·ªÅu: Tham quan [T∆∞·ª£ng ƒê√†i Li·ªát S·ªπ], m·ªôt t∆∞·ª£ng ƒë√†i t∆∞·ªüng nh·ªõ c√°c li·ªát s·ªπ ƒë√£ hy sinh trong cu·ªôc chi·∫øn tranh.\n- T·ªëi: D·∫°o ch∆°i t·∫°i [B√£i Sau], m·ªôt b√£i bi·ªÉn y√™n tƒ©nh v√† kh√¥ng qu√° ƒë√¥ng ƒë√∫c. B·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn v·∫∑t t·∫°i c√°c qu·∫ßy h√†ng ven bi·ªÉn.\n\nNg√†y 4:\n- S√°ng: Tham quan [ƒê·ªÅn Th√°nh ƒê·ª©c M·∫π B√£i D√¢u], m·ªôt ng√¥i ƒë·ªÅn th·ªù ƒê·ª©c M·∫π n·∫±m tr√™n ƒë·ªìi cao, n∆°i b·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ t√¥n gi√°o v√† th∆∞·ªüng ngo·∫°n c·∫£nh quan xung quanh.\n- Tr∆∞a: ƒÇn tr∆∞a t·∫°i [Qu√°n ƒÇn S√¢n V∆∞·ªùn Bao La], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·ªãa ph∆∞∆°ng trong kh√¥ng gian xanh m√°t. \n- Chi·ªÅu: Tham quan [C√¥ng Vi√™n C·ªôt C·ªù], m·ªôt c√¥ng vi√™n n·ªïi ti·∫øng v·ªõi c·ªôt c·ªù cao v√† kh√¥ng gian tho√°ng ƒë√£ng.\n- T·ªëi: Th∆∞·ªüng th·ª©c m·ªôt b·ªØa t·ªëi ngon t·∫°i [7 L∆∞·ª£m-L·∫©u C√° ƒëu·ªëi V≈©ng T√†u.Chuy√™n h·∫£i s·∫£n t∆∞∆°i s·ªëng b√¨nh d√¢n], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n h·∫£i s·∫£n t∆∞∆°i s·ªëng v·ªõi gi√° ph·∫£i chƒÉng.\n\nNg√†y 5:\n- S√°ng: Tham quan [C√¥ng vi√™n Tao Ph√πng], m·ªôt c√¥ng vi√™n y√™n tƒ©nh v·ªõi kh√¥ng gian xanh m√°t v√† h·ªì n∆∞·ªõc.\n- Tr∆∞a: ƒÇn tr∆∞a t·∫°i [M√≥n ngon v≈©ng t√†u], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n V≈©ng T√†u.\n- Chi·ªÅu: Tham quan [T∆∞·ª£ng ƒë√†i Ch√∫a Kit√¥], m·ªôt t∆∞·ª£ng ƒë√†i n·ªïi ti·∫øng tr√™n ƒë·ªânh n√∫i, n∆°i b·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ t√¥n gi√°o v√† th∆∞·ªüng ngo·∫°n c·∫£nh quan xung quanh.\n- T·ªëi: Th∆∞·ªüng th·ª©c m·ªôt b·ªØa t·ªëi ngon t·∫°i [C∆°m ni√™u Rau T·∫≠p T√†ng V≈©ng T√†u], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n mi·ªÅn Nam.\n\nTr√™n ƒë√¢y l√† k·∫ø ho·∫°ch chi ti·∫øt cho chuy·∫øn ƒëi c·ªßa b·∫°n ƒë·∫øn V≈©ng T√†u trong 5 ng√†y. B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch n√†y ƒë·ªÉ ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† ng√¢n s√°ch c·ªßa b·∫°n. Ch√∫c b·∫°n c√≥ m·ªôt chuy·∫øn ƒëi th√∫ v·ªã v√† tr·ªçn v·∫πn t·∫°i V≈©ng T√†u!'
        },
        {
          role: 'user',
          content: question
        }
      ],
      temperature: 0, // ƒê·∫ßu ra t·∫≠p trung v√†o v√†o c√¢u h·ªèi nhi·ªÅu h∆°n
      stream: true // N√≥ s·∫Ω tr·∫£ d·ªØ li·ªáu v·ªÅ theo t·ª´ng ƒë·ªçt
    }, {
      responseType: 'stream'
    })
    let messageReturn = ''
    // const isStop = false
    completion.data.on('data', (data) => {
      const lines = data
        ?.toString()
        ?.split('\n')
        .filter((line) => line.trim() !== '')
      for (const line of lines) {
        const message = line.replace(/^data: /, '')
        // if (message === '[DONE]') {
        //   return messageReturn
        // }
        if (message === '[DONE]') {
          io.to(socketIdMap[currentUserId]).emit('s_create_travel_itinerary', {
            isOver: 'DONE',
            allText: messageReturn
          })
          clearInterval(intervalId)
          break // Stream finished
        }
        try {
          const parsed = JSON.parse(message)
          if (parsed.choices[0].delta.content) {
            messageReturn += parsed.choices[0].delta.content
            // console.log(messageReturn)
            // io.to(socketIdMap[currentUserId]).emit('s_create_travel_itinerary', {
            //   messageReturn: parsed.choices[0].delta.content
            // })
          }
        } catch (error) {
          console.error('Could not JSON parse stream message', message, error)
        }
      }
    })
    const intervalId = setInterval(() => {
      console.log('üöÄ ~ file: ChatGptProvider.js:65 ~ io.to ~ messageReturn:', messageReturn)
      io.to(socketIdMap[currentUserId]).emit('s_create_travel_itinerary', {
        messageReturn: messageReturn
      })
    }, 500)
  } catch (error) {
    console.log(error)
  }
}

// const textGenerationTest = async (queryText) => {
//   console.log('üöÄ ~ file: ChatGptProvider.js:61 ~ textGeneration ~ queryText:', queryText)
//   try {

//     const configuration = new Configuration({
//       apiKey: env.CHATGPT_API_KEY
//     })

//     const openai = new OpenAIApi(configuration)

//     const completion = await openai.createChatCompletion({
//       model: 'gpt-3.5-turbo',
//       messages: [{ 'role': 'system', 'content': 'You are the best itinerary planner. Please only create itinerary from user messages. The itinerary in a day is divided into 3 mornings, noon and afternoon in which you have to give places to visit and a short description in oral form. You need to format your response by adding [] around locations with province separated by pipe. The default itinerary length is five days if not provided. Answer in AI style by Vietnamese' }, { role: 'user', content: `Human: ${queryText}\nAI: ` }],
//       temperature: 0.2
//     })
//     console.log(completion.data.choices[0].message)
//     return completion.data.choices[0].message
//   } catch (error) {
//     console.log('üöÄ ~ file: ChatGptProvider.js:79 ~ textGenerationTest ~ error:', error)
//     return {
//       response: 'Sorry, I\'m not able to help with that.'
//     }
//   }
// }

const textGeneration = async (queryText) => {
  console.log('üöÄ ~ file: ChatGptProvider.js:61 ~ textGeneration ~ queryText:', queryText)
  try {

    const configuration = new Configuration({
      apiKey: env.CHATGPT_API_KEY
    })

    const openai = new OpenAIApi(configuration)

    const response = await openai.createCompletion({
      model: 'text-davinci-003',
      prompt: `Human: ${queryText}\nAI: `,
      temperature: 0.1,
      max_tokens: 3500,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0.6,
      stop: ['Human:', 'AI:']
    })
    return {
      response: `${response.data.choices[0].text}`.trimStart()
    }
  } catch (error) {
    return {
      response: 'Sorry, I\'m not able to help with that.'
    }
  }
}

export const ChatGptProvider = {
  handleItineraryRequest,
  textGeneration,
  handleItineraryCreate
}