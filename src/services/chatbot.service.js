// import { UserModel } from 'models/user.model'
import dialogflow from '@google-cloud/dialogflow'
import { v4 as uuidv4 } from 'uuid'
import { ChatGptProvider } from 'providers/ChatGptProvider'
import { OpenWeatherProvider } from 'providers/OpenWeatherProvider'
import { dfConfig } from 'config/dfConfig'
import { MapService } from './map.service'
import { GeocodingGoogleMapProvider } from 'providers/GeocodingGoogleMapProvider'
import { PlacesSearchProvider } from 'providers/PlacesSearchProvider'
import { env } from 'config/environtment'
import axios from 'axios'

const getText = async (data) => {
  // data = {
  //  question: 'string',
  //  currentUserId: 'string',
  //  languageCode: 'string',
  //  coor: {"latitude": 10.456781258055845, "longitude": 106.72097991692522}
  // }
  try {
    console.log('üöÄ ~ file: chatbot.service.js:17 ~ getText ~ data:', data)
    // connect to dialogflow api
    const projectId = dfConfig.project_id
    const sessionId = data.currentUserId

    const credentials = {
      client_email: dfConfig.client_email,
      private_key: dfConfig.private_key
    }

    // Create a new session
    const sessionClient = new dialogflow.SessionsClient({ credentials })
    const sessionPath = sessionClient.projectAgentSessionPath(
      projectId,
      sessionId
    )

    const req = {
      session: sessionPath,
      queryInput: {
        text: {
          text: data.question,
          languageCode: data.languageCode
        }
      }
    }

    const res = await sessionClient.detectIntent(req)

    // return res
    let action = res[0].queryResult.action
    console.log('üöÄ ~ file: chatbot.service.js:39 ~ getText ~ action:', action)

    let queryText = res[0].queryResult.queryText

    let responseText = res[0].queryResult.fulfillmentMessages[0].text.text[0]
    console.log('üöÄ ~ file: chatbot.service.js:46 ~ getText ~ responseText:', responseText)

    if (action === 'input.unknown') {
      // N·∫øu h√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c x√°c ƒë·ªãnh th√¨ chuy·ªÉn qua h·ªèi con chatGPT
      let result = await ChatGptProvider.textGeneration(queryText)
      result.action = action
      return result
    } else if (action === 'input.suggest-place') {
      // T·ªïng h·ªçp place

      // Tr·∫£ d·ªØ li√™u v·ªÅ
      return {
        response: responseText,
        action: action
      }
    } else if (action === 'input.get-weather') {
      // X·ª≠ l√Ω ƒë·ªÉ tr·∫£ d·ªØ li·ªáu v·ªÅ
      const address = res[0].queryResult.parameters.fields?.address?.stringValue
      console.log('üöÄ ~ file: chatbot.service.js:61 ~ getText ~ address:', address)

      const dateString = res[0].queryResult.parameters.fields?.date?.stringValue
      console.log('üöÄ ~ file: chatbot.service.js:70 ~ getText ~ dateString:', dateString)

      const here = res[0].queryResult.parameters.fields?.here?.stringValue // HERE
      console.log('üöÄ ~ file: chatbot.service.js:73 ~ getText ~ here:', here)
      const current_time = res[0].queryResult.parameters.fields?.current_time?.stringValue //CURRENT_TIME
      console.log('üöÄ ~ file: chatbot.service.js:75 ~ getText ~ current_time:', current_time)

      // ph·∫£i c√≥ 1 trong hai c·∫∑p nh∆∞ n√†y
      if ((current_time || dateString) && (here || address)) {

        let weatherData
        // n·∫øu TH c√≥ c·∫£ address v·ªõi here th√¨ c·∫©n th·∫≠n
        // n·∫øu call city kh√¥ng ƒë∆∞·ª£c r chuy·ªÉn qua coor (∆∞u ti√™n sau)
        // if (here === 'HERE' && address !== '') {
        // N·∫øu kh√¥ng c√≥ address
        if (!address) {
          console.log('Kh√¥ng c√≥ address')
          // TH address b·∫±ng null th√¨ h√£y l·∫•y t·ªça ƒë·ªô hi·ªán t·∫°i ƒë·ªÉ call api weather
          if (!data.coor) {
            console.log('kh√¥ng c√≥ coor')
            return {
              response: responseText,
              action: action
            }
          } else {
            console.log('c√≥ coor')
            weatherData = await MapService.getWeatherForecast(data.coor)
          }
        } else {
          console.log('C√≥ address')
          // Call weather api bth
          // weatherData = await OpenWeatherProvider.getWeatherForecastByCity(address)
          // if (!weatherData) {
          const geocodingDirect = await OpenWeatherProvider.getGeocodingDirect(address)
          console.log('coor l·∫•y t·ª´ geocodingDirect')
          weatherData = await MapService.getWeatherForecast(geocodingDirect.coor)
          // }
        }

        // Tr·∫£ d·ªØ li√™u v·ªÅ
        let textToResponse
        if ((current_time && here) || (current_time && address) || (dateString && here) || (dateString && address))
          textToResponse = 'ƒê√¢y l√† th√¥ng tin v·ªÅ th·ªùi ti·∫øt t·∫°i n∆°i b·∫°n c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªói 3 gi·ªù trong 5 ng√†y t·ªõi do ƒë√≥ c√°c y√™u c·∫ßu c·ªßa b·∫°n trong qu√° kh·ª© ho·∫∑c qu√° 5 ng√†y ti·∫øp theo s·∫Ω kh√¥ng c√≥ hi·ªáu l·ª±c. Mong b·∫°n th√¥ng c·∫£m v·ªÅ s·ª± b·∫•t ti·ªán n√†y!'
        else
          textToResponse = responseText
        return {
          response: textToResponse,
          action: action,
          data: weatherData
        }
        // }
        // const date = new Date(dateString)
        // console.log('üöÄ ~ file: chatbot.service.js:66 ~ getText ~ date:', date)

        // const month = date.getMonth()
        // console.log('üöÄ ~ file: chatbot.service.js:69 ~ getText ~ month:', month)

        // const day = date.getDate()
        // console.log('üöÄ ~ file: chatbot.service.js:72 ~ getText ~ day:', day)


      } else if (here === 'HERE') {
        return {
          response: 'B·∫°n mu·ªën bi·∫øt th·ªùi ti·∫øt v√†o l√∫c n√†o?',
          action: 'input.unfinish'
        }
      } else {
        return {
          response: responseText,
          action: 'input.unfinish'
        }
      }
    } else if (action === 'input.location-on-map') {
      // khi v√†o TH location-on-map th√¨ ch√∫ng ta goi search text place
      return {
        response: 'Sau ƒë√¢y l√† th√¥ng tin v·ªÅ ƒë·ªãa ƒëi·ªÉm c·ªßa b·∫°n',
        action: action,
        data: {
          query: data.question,
          sortBy: 'DEFAULT',
          radius: '5000',
          location: data.coor
        }
      }
    } else if (action === 'input.direction-a-to-b') {
      const fields = ['admin-area', 'city', 'street-address', 'business-name', 'country', 'subadmin-area', 'island', 'zip-code', 'shortcut']

      let start_location = res[0].queryResult.parameters.fields?.start_location?.stringValue
      if (!start_location && res[0].queryResult.parameters.fields?.start_location?.structValue) {
        fields.map(field => {
          if (res[0].queryResult.parameters.fields?.start_location?.structValue.fields[field].stringValue) {
            start_location = res[0].queryResult.parameters.fields?.start_location?.structValue.fields[field].stringValue
          }
        })
      }
      console.log('üöÄ ~ file: chatbot.service.js:158 ~ getText ~ start_location:', start_location)

      let end_location = res[0].queryResult.parameters.fields?.end_location?.stringValue
      if (!end_location && res[0].queryResult.parameters.fields?.end_location?.structValue) {
        fields.map(field => {
          if (res[0].queryResult.parameters.fields?.end_location?.structValue.fields[field].stringValue) {
            end_location = res[0].queryResult.parameters.fields?.end_location?.structValue.fields[field].stringValue
          }
        })
      }
      console.log('üöÄ ~ file: chatbot.service.js:161 ~ getText ~ end_location:', end_location)

      const here = res[0].queryResult.parameters.fields?.here?.stringValue
      console.log('üöÄ ~ file: chatbot.service.js:164 ~ getText ~ here:', here)

      // TH c∆° b·∫£n c√≥ c·∫£ hai start_location v√† end_location
      if (start_location && end_location) {
        return {
          response: 'Sau ƒë√¢y l√† tuy·∫øn ƒë∆∞·ªùng c·ªßa b·∫°n',
          action: action,
          data: {
            oriAddress: start_location,
            desAddress: end_location,
            oriPlaceId: null,
            desPlaceId: null,
            oriCoor: null,
            desCoor: null,
            modeORS: 'driving-car',
            modeGCP: 'DRIVE',
            typeOri: 'address',
            typeDes: 'address',
            routeModifiers: { avoidTolls: false, avoidHighways: false, avoidFerries: false },
            languageCode: 'vi'
          }
        }
      }
      // TH c√≥ here v√† c√≥ m·ªôt trong hai th·∫±ng start_location v√† end_location
      else if (here && (start_location || end_location)) {
        if (start_location) {
          return {
            response: 'Sau ƒë√¢y l√† tuy·∫øn ƒë∆∞·ªùng c·ªßa b·∫°n',
            action: action,
            data: {
              oriAddress: start_location,
              desAddress: null,
              oriPlaceId: null,
              desPlaceId: null,
              oriCoor: null,
              desCoor: data.coor,
              modeORS: 'driving-car',
              modeGCP: 'DRIVE',
              typeOri: 'address',
              typeDes: 'coordinate',
              routeModifiers: { avoidTolls: false, avoidHighways: false, avoidFerries: false },
              languageCode: 'vi'
            }
          }
        } else if (end_location) {
          return {
            response: 'Sau ƒë√¢y l√† tuy·∫øn ƒë∆∞·ªùng c·ªßa b·∫°n',
            action: action,
            data: {
              oriAddress: null,
              desAddress: end_location,
              oriPlaceId: null,
              desPlaceId: null,
              oriCoor: data.coor,
              desCoor: null,
              modeORS: 'driving-car',
              modeGCP: 'DRIVE',
              typeOri: 'coordinate',
              typeDes: 'address',
              routeModifiers: { avoidTolls: false, avoidHighways: false, avoidFerries: false },
              languageCode: 'vi'
            }
          }
        }
      } else {
        return {
          response: responseText,
          action: 'input.unfinish'
        }
      }
    } else if (action === 'input.where-am-i') {
      // s·ª≠ d·ª•ng Geocoding ƒë·ªÉ l·∫•y ƒë∆∞·ª£c ƒë·ªãa ch·ªâ
      console.log('data.coor', data.coor)
      const geocoding = await GeocodingGoogleMapProvider.getPlaceIdFromCoords(data.coor.latitude, data.coor.longitude)
      responseText = responseText.replace('[address]', geocoding.formatted_address)
      return {
        response: responseText,
        action: action,
        data: geocoding
      }
    } else if (action === 'input.travel-itinerary') {
      const fields = ['admin-area', 'city', 'street-address', 'business-name', 'country', 'subadmin-area', 'island', 'zip-code', 'shortcut']

      let placeToTravel = res[0].queryResult.parameters.fields?.location?.stringValue

      if (!placeToTravel && res[0].queryResult.parameters.fields?.location?.structValue) {
        fields.map(field => {
          if (res[0].queryResult.parameters.fields?.location?.structValue.fields[field].stringValue) {
            placeToTravel = res[0].queryResult.parameters.fields?.location?.structValue.fields[field].stringValue
          }
        })
      }

      let numberDayToTravel = res[0].queryResult.parameters.fields['number-integer'].numberValue

      if (placeToTravel) {

        // C·∫ßn ph·∫£i x√°c ƒë·ªãnh t√™n ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ t·∫°o l·ªãch tr√¨nh
        // Sau ƒë√≥ c·∫ßn call api ƒë·ªÉ l·∫•y ra t√™n c√°c ƒë·ªãa ƒëi·ªÉm tham quan v√† n∆°i ƒÉn u·ªëng
        const queryTravelPlaces = `ƒê·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng t·∫°i ${placeToTravel}`
        const queryFnbPlaces = `ƒê·∫°i ƒëi·ªÉm ƒÉn u·ªëng n·ªïi ti·∫øng t·∫°i ${placeToTravel}`

        const dataTextSearch = {
          rankby: env.RANKBY_PROMINENCE,
          radius: env.RADIUS_DEFAULT,
          location: data.coor
        }

        // L·∫•y 2 c√°i url ƒë·ªÉ req
        const urlTravelPlaces = PlacesSearchProvider.getPlacesTextSearchURL({ ...dataTextSearch, query: queryTravelPlaces })
        const urlFnbPlaces = PlacesSearchProvider.getPlacesTextSearchURL({ ...dataTextSearch, query: queryFnbPlaces })

        let dataTravelPlaces, dataFnbPlaces, travelPlaces = [], fnbPlaces = []

        // G·ªçi ti·∫øn tr√¨nh song song ƒë·ªÉ g·∫£m th·ªùi gian ch·ªù request
        await axios.all([
          axios.get(urlTravelPlaces),
          axios.get(urlFnbPlaces)
        ]).then(
          (datas) => {
            datas.map((res, index) => {
              if (index === 0) {
                dataTravelPlaces = res.data.results
                res.data.results.map(place => {
                  travelPlaces.push(place.name)
                })
              }
              else if (index === 1) {
                dataFnbPlaces = res.data.results
                res.data.results.map(place => {
                  fnbPlaces.push(place.name)
                })
              }
            })
          }
        ).catch(err => console.log('L·ªói ·ªü g·ªçi urlTravelPlaces v√† urlFnbPlaces', err))

        console.log('üöÄ ~ file: chatbot.service.js:299 ~ testChatGPT ~ fnbPlaces:', fnbPlaces)
        console.log('üöÄ ~ file: chatbot.service.js:299 ~ testChatGPT ~ travelPlaces:', travelPlaces)

        // Hi·ªán t·∫°i ·ªü ƒë√¢y ƒë√£ c√≥ fnbPlaces v√† travelPlaces ch√∫ng ta s·∫Ω bi·∫øn ƒë·ªïi photo v√® d·∫°ng base 64
        // const dataPlaces = [...(dataTravelPlaces || []), ...(dataFnbPlaces || [])]
        // let dataPlaces = [], dataTravelPlacesClone = [], dataFnbPlacesClone = [], travelPlacesClone = [], fnbPlacesClone = []
        // for (let index = 0; index < numberDayToTravel * 2; index++) {
        //   dataPlaces = [...dataPlaces, dataTravelPlaces[index], dataFnbPlaces[index]]
        //   dataTravelPlacesClone.push(dataTravelPlaces[index])
        //   dataFnbPlacesClone.push(dataFnbPlaces[index])
        //   travelPlacesClone.push(travelPlaces[index])
        //   fnbPlacesClone.push(fnbPlaces[index])
        // }
        // // l·∫•y ra t·ª´ng photo
        // const photos = dataPlaces.map(place => place.photos[0].photo_reference)
        // await axios.all(
        //   photos.map(photo => axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${photo}&key=${env.MAP_API_KEY}`, { responseType: 'arraybuffer' }))
        // ).then(
        //   (datas) => {
        //     let newPhotos = []
        //     datas.map(res => {
        //       const urlBase64Decode = Buffer.from(res.data, 'binary').toString('base64')
        //       newPhotos.push(urlBase64Decode)
        //     })

        //     dataPlaces.map((place) => {
        //       if (newPhotos.length === 0)
        //         return
        //       if (place.photos) {
        //         place.photos = newPhotos[0]
        //         newPhotos.shift()
        //       }
        //     })
        //   }
        // ).catch(err => console.log('L·ªói ·ªü g·ªçi api ƒë·ªÉ l√† photos => base64', err))

        // let result = await ChatGptProvider.handleItineraryCreate(data.question, travelPlaces, fnbPlaces)


        return {
          response: 'ƒê√¢y l√† th√¥ng tin c·ªßa b·∫°n',
          action: action,
          data: {
            travelPlaces,
            fnbPlaces,
            dataTravelPlaces,
            dataFnbPlaces,
            numberDayToTravel: numberDayToTravel,
            placeToTravel: placeToTravel,
            question: queryText
          }
        }

        // return {
        //   response: 'ƒê√¢y l√† th√¥ng tin c·ªßa b·∫°n',
        //   action: action,
        //   data: {
        //     travelPlaces: travelPlacesClone,
        //     fnbPlaces: fnbPlacesClone,
        //     dataTravelPlaces: dataTravelPlacesClone,
        //     dataFnbPlaces: dataFnbPlacesClone,
        //     numberDayToTravel: numberDayToTravel,
        //     placeToTravel: placeToTravel,
        //     question: queryText,
        //     dataPlaces: dataPlaces
        //   }
        // }

      } else {
        return {
          response: responseText,
          action: 'input.unfinish'
        }
      }
    } else {
      return {
        response: responseText,
        action: action
      }
    }
  } catch (error) {
    throw new Error(error)
  }
}

const testChatGPT = async (data) => {
  try {
    // const query = `Please create only the itinerary from the user's message: "${data.userMessgage}". You need to format your response by adding [] around locations with province separated by pipe. The default itinerary length is five days if not provided.`
    // const query1 = `${data.userMessgage}. B·∫°n ph·∫£i ƒë·ªãnh d·∫°ng m·ªói ƒë·ªãa ƒëi·ªÉm theo d·∫°ng [place] v√≠ d·ª• [C√¥ng vi√™n B√£i Tr∆∞·ªõc] v√† c√°c ƒë·ªãa ƒëi·ªÉm ph·∫£i kh√°c nhau kh√¥ng l·∫∑p l·∫°i. `
    // const travelPlaces = 'Khu du l·ªãch B·ª≠u Long, Khu du l·ªãch sinh th√°i Th√°c Giang ƒêi·ªÅn, VƒÉn mi·∫øu Tr·∫•n Bi√™n, Khu Du L·ªãch Cao Minh, Th√°c ƒê√° H√†n, Khu du l·ªãch - ƒë√¥ th·ªã S∆°n Ti√™n, Khu Du l·ªãch Th√°c Mai, Khu du l·ªãch Sinh Th√°i B√≤ C·∫°p V√†ng, LaÃÄng Du LiÃ£ch Sinh Th√°i Tre Vi√™Ã£t, KDL Su·ªëi M∆° - ƒê·ªìng Nai'
    // const fnbPlaces = 'B√≤ N·∫±m Nh√∫ng H·ªë Nai, Nh√† h√†ng n·ªïi L√†ng B√®, Nh√† h√†ng Ng·ªçc C·∫£nh, Qu√°n ƒÇn Anh Minh, Qu√°n B√∫n B√≤- Ph·ªü B√≤, Nh√† H√†ng K\' T√¢n, Qu√°n ƒÇn H·ªìng Ph√°t, Qu√°n ƒÉn gia ƒë√¨nh Ph√∫c L·ªôc'
    // C·∫ßn ph·∫£i x√°c ƒë·ªãnh t√™n ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ t·∫°o l·ªãch tr√¨nh
    const placeToTravel = 'ƒê·ªìng Nai'
    // Sau ƒë√≥ c·∫ßn call api ƒë·ªÉ l·∫•y ra t√™n c√°c ƒë·ªãa ƒëi·ªÉm tham quan v√† n∆°i ƒÉn u·ªëng
    const queryTravelPlaces = `ƒê·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng t·∫°i ${placeToTravel}`
    const queryFnbPlaces = `ƒê·∫°i ƒëi·ªÉm ƒÉn u·ªëng n·ªïi ti·∫øng t·∫°i ${placeToTravel}`

    const dataTextSearch = {
      rankby: env.RANKBY_PROMINENCE,
      radius: env.RADIUS_DEFAULT,
      location: data.coor
    }

    // L·∫•y 2 c√°i url ƒë·ªÉ req
    const urlTravelPlaces = PlacesSearchProvider.getPlacesTextSearchURL({ ...dataTextSearch, query: queryTravelPlaces })
    const urlFnbPlaces = PlacesSearchProvider.getPlacesTextSearchURL({ ...dataTextSearch, query: queryFnbPlaces })

    let dataTravelPlaces, dataFnbPlaces, travelPlaces = [], fnbPlaces = []

    // G·ªçi ti·∫øn tr√¨nh song song ƒë·ªÉ g·∫£m th·ªùi gian ch·ªù request
    await axios.all([
      axios.get(urlTravelPlaces),
      axios.get(urlFnbPlaces)
    ]).then(
      (datas) => {
        datas.map((res, index) => {
          if (index === 0) {
            dataTravelPlaces = res.data.results
            res.data.results.map(place => {
              travelPlaces.push(place.name)
            })
          }
          else if (index === 1) {
            dataFnbPlaces = res.data.results
            res.data.results.map(place => {
              fnbPlaces.push(place.name)
            })
          }
        })
      }
    ).catch(err => console.log('L·ªói ·ªü g·ªçi urlTravelPlaces v√† urlFnbPlaces', err))

    console.log('üöÄ ~ file: chatbot.service.js:299 ~ testChatGPT ~ fnbPlaces:', fnbPlaces)
    console.log('üöÄ ~ file: chatbot.service.js:299 ~ testChatGPT ~ travelPlaces:', travelPlaces)

    let result = await ChatGptProvider.handleItineraryCreate(data.question, travelPlaces, fnbPlaces)

    return {
      travelPlaces,
      fnbPlaces
    }

    // const text = 'D∆∞·ªõi ƒë√¢y l√† m·ªôt k·∫ø ho·∫°ch chi ti·∫øt cho chuy·∫øn ƒëi 5 ng√†y c·ªßa b·∫°n ƒë·∫øn V≈©ng T√†u:\n\nNg√†y 1:\n- S√°ng: T·ª´ th√†nh ph·ªë H·ªì Ch√≠ Minh, b·∫°n c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn V≈©ng T√†u b·∫±ng xe bu√Ωt ho·∫∑c t√†u h·ªèa. ƒê·∫øn V≈©ng T√†u, b·∫°n c√≥ th·ªÉ nh·∫≠n ph√≤ng t·∫°i kh√°ch s·∫°n c·ªßa b·∫°n.\n- Tr∆∞a: Th∆∞·ªüng th·ª©c m·ªôt b·ªØa tr∆∞a ngon t·∫°i [Nh√† h√†ng G√†nh H√†o 1], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n h·∫£i s·∫£n t∆∞∆°i s·ªëng.\n- Chi·ªÅu: Tham quan [B·∫°ch Dinh (White Palace Historical Cultural Relic)], m·ªôt di t√≠ch l·ªãch s·ª≠ quan tr·ªçng v·ªõi ki·∫øn tr√∫c Ph√°p c·ªï ƒëi·ªÉn v√† t·∫ßm nh√¨n tuy·ªát ƒë·∫πp ra bi·ªÉn.\n- T·ªëi: D·∫°o ch∆°i t·∫°i [B√£i Tr∆∞·ªõc], m·ªôt b√£i bi·ªÉn n·ªïi ti·∫øng v·ªõi c√°t tr·∫Øng v√† kh√¥ng kh√≠ trong l√†nh. B·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn v·∫∑t t·∫°i c√°c qu·∫ßy h√†ng ven bi·ªÉn.\n\nNg√†y 2:\n- S√°ng: Tham quan [H·∫£i ƒêƒÉng V≈©ng T√†u], m·ªôt bi·ªÉu t∆∞·ª£ng n·ªïi ti·∫øng c·ªßa th√†nh ph·ªë. B·∫°n c√≥ th·ªÉ leo l√™n ƒë·ªânh h·∫£i ƒëƒÉng ƒë·ªÉ ng·∫Øm to√†n c·∫£nh V≈©ng T√†u t·ª´ tr√™n cao.\n- Tr∆∞a: ƒÇn tr∆∞a t·∫°i [Nh√† h√†ng C√¢y B√†ng], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n mi·ªÅn Trung.\n- Chi·ªÅu: Tham quan [ƒê·ªìi Con Heo], m·ªôt ƒëi·ªÉm ƒë·∫øn ph·ªï bi·∫øn v·ªõi t∆∞·ª£ng ƒë√†i con heo v√† t·∫ßm nh√¨n ƒë·∫πp ra bi·ªÉn.\n- T·ªëi: Th∆∞·ªüng th·ª©c m·ªôt b·ªØa t·ªëi ngon t·∫°i [Nh√† h√†ng Ng·ªçc Dung], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n h·∫£i s·∫£n t∆∞∆°i s·ªëng.\n\nNg√†y 3:\n- S√°ng: Tham quan [Linh S∆°n C·ªï T·ª±], m·ªôt ng√¥i ch√πa c·ªï n·∫±m tr√™n ƒë·ªânh n√∫i, n∆°i b·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ ƒë·∫°o Ph·∫≠t v√† th∆∞·ªüng ngo·∫°n c·∫£nh quan xung quanh.\n- Tr∆∞a: ƒÇn tr∆∞a t·∫°i [Nh√† h√†ng h·∫£i s·∫£n L√¢m ƒê∆∞·ªùng - V≈©ng T√†u], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n h·∫£i s·∫£n t∆∞∆°i s·ªëng v·ªõi gi√° ph·∫£i chƒÉng.\n- Chi·ªÅu: Tham quan [T∆∞·ª£ng ƒê√†i Li·ªát S·ªπ], m·ªôt t∆∞·ª£ng ƒë√†i t∆∞·ªüng nh·ªõ c√°c li·ªát s·ªπ ƒë√£ hy sinh trong cu·ªôc chi·∫øn tranh.\n- T·ªëi: D·∫°o ch∆°i t·∫°i [B√£i Sau], m·ªôt b√£i bi·ªÉn y√™n tƒ©nh v√† kh√¥ng qu√° ƒë√¥ng ƒë√∫c. B·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn v·∫∑t t·∫°i c√°c qu·∫ßy h√†ng ven bi·ªÉn.\n\nNg√†y 4:\n- S√°ng: Tham quan [ƒê·ªÅn Th√°nh ƒê·ª©c M·∫π B√£i D√¢u], m·ªôt ng√¥i ƒë·ªÅn th·ªù ƒê·ª©c M·∫π n·∫±m tr√™n ƒë·ªìi cao, n∆°i b·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ t√¥n gi√°o v√† th∆∞·ªüng ngo·∫°n c·∫£nh quan xung quanh.\n- Tr∆∞a: ƒÇn tr∆∞a t·∫°i [Qu√°n ƒÇn S√¢n V∆∞·ªùn Bao La], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·ªãa ph∆∞∆°ng trong kh√¥ng gian xanh m√°t. \n- Chi·ªÅu: Tham quan [C√¥ng Vi√™n C·ªôt C·ªù], m·ªôt c√¥ng vi√™n n·ªïi ti·∫øng v·ªõi c·ªôt c·ªù cao v√† kh√¥ng gian tho√°ng ƒë√£ng.\n- T·ªëi: Th∆∞·ªüng th·ª©c m·ªôt b·ªØa t·ªëi ngon t·∫°i [7 L∆∞·ª£m-L·∫©u C√° ƒëu·ªëi V≈©ng T√†u.Chuy√™n h·∫£i s·∫£n t∆∞∆°i s·ªëng b√¨nh d√¢n], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n h·∫£i s·∫£n t∆∞∆°i s·ªëng v·ªõi gi√° ph·∫£i chƒÉng.\n\nNg√†y 5:\n- S√°ng: Tham quan [C√¥ng vi√™n Tao Ph√πng], m·ªôt c√¥ng vi√™n y√™n tƒ©nh v·ªõi kh√¥ng gian xanh m√°t v√† h·ªì n∆∞·ªõc.\n- Tr∆∞a: ƒÇn tr∆∞a t·∫°i [M√≥n ngon v≈©ng t√†u], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n V≈©ng T√†u.\n- Chi·ªÅu: Tham quan [T∆∞·ª£ng ƒë√†i Ch√∫a Kit√¥], m·ªôt t∆∞·ª£ng ƒë√†i n·ªïi ti·∫øng tr√™n ƒë·ªânh n√∫i, n∆°i b·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ t√¥n gi√°o v√† th∆∞·ªüng ngo·∫°n c·∫£nh quan xung quanh.\n- T·ªëi: Th∆∞·ªüng th·ª©c m·ªôt b·ªØa t·ªëi ngon t·∫°i [C∆°m ni√™u Rau T·∫≠p T√†ng V≈©ng T√†u], n∆°i b·∫°n c√≥ th·ªÉ th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n mi·ªÅn Nam.\n\nTr√™n ƒë√¢y l√† k·∫ø ho·∫°ch chi ti·∫øt cho chuy·∫øn ƒëi c·ªßa b·∫°n ƒë·∫øn V≈©ng T√†u trong 5 ng√†y. B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch n√†y ƒë·ªÉ ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† ng√¢n s√°ch c·ªßa b·∫°n. Ch√∫c b·∫°n c√≥ m·ªôt chuy·∫øn ƒëi th√∫ v·ªã v√† tr·ªçn v·∫πn t·∫°i V≈©ng T√†u!'

    // const result = []
    // let textEnding = 'UNDONE', textIntroduce = 'UNDONE'

    // // ph√¢n t√°ch t·ª´ng ƒëo·∫°n m·ªôt ra
    // const paragraphArray = text.split('\n\n')

    // if (paragraphArray.length > 0) {

    //   console.log('üöÄ ~ file: chatbot.service.js:336 ~ testChatGPT ~ paragraphArray:', paragraphArray)
    //   // l·∫•y ra ƒë∆∞·ª£c ƒëoa·∫°n ƒë·∫ßu v√† ƒëo·∫°n cu·ªëi (M·ªü ƒë·∫ßu v√† k·∫øt th√∫c)
    //   textIntroduce = paragraphArray[0].trim()
    //   // X√≥a ph·∫ßn t·ª≠ ƒë√†u c·ªßa m·∫£ng
    //   paragraphArray.shift()

    //   const isDoneTreaming = false
    //   // c√≥ m·ªôt l∆∞u √Ω nh·ªè, khi streaming ch·∫Øc ch·∫Øn s·∫Ω ch∆∞a c√≥ ƒëo·∫°n cu·ªëi ngay ƒë∆∞·ª£c n√™n ph·∫£i check v·ªõi isDoneTreaming
    //   if (isDoneTreaming) {
    //     textEnding = paragraphArray[paragraphArray.length - 1].trim()
    //   }

    //   // x√≥a ph·∫ßn t·ª≠ cu·ªëi c·ªßa m·∫£ng
    //   paragraphArray.pop()

    //   if (paragraphArray.length > 0) {
    //     paragraphArray.map((paragraph, index) => {
    //       // ph√¢n ra t·ª´ "\n" v√† x√≥a th·∫±ng ƒë√†u ti·ªÅn c·ªßa m·∫£ng
    //       const originalDay = paragraph.split('\n')
    //       originalDay.shift()
    //       // console.log('üöÄ ~ file: chatbot.service.js:347 ~ paragraphArray.map ~ originalDay:', originalDay)
    //       const dataDay = {
    //         numberOfDay: index + 1,
    //         morning: originalDay[0].replace('- S√°ng:', '').trim(),
    //         noon: originalDay[1].replace('- Tr∆∞a:', '').trim(),
    //         afternoon: originalDay[2].replace('- Chi·ªÅu:', '').trim(),
    //         evening: originalDay[3].replace('- T·ªëi:', '').trim()
    //       }
    //       result.push(dataDay)
    //     })
    //   }
    // }
    // // console.log('üöÄ ~ file: chatbot.service.js:344 ~ testChatGPT ~ paragraphArray:', paragraphArray)
    // return {
    //   textIntroduce,
    //   dataDay: result,
    //   textEnding
    // }
  } catch (error) {
    throw new Error(error)
  }
}

export const ChatBotService = {
  getText,
  testChatGPT
}
