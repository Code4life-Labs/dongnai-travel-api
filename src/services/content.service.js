import { ContentModel } from 'models/content.model'
import { MapModel } from 'models/map.model'
import { RedisQueueProvider } from 'providers/RedisQueueProvider'

import { env } from 'config/environtment'
import { TextToSpeechProvider } from 'providers/TextToSpeechProvider'
import { TextToSpeechConstants } from 'utilities/constants'
import { SendMessageToSlack } from 'providers/SendMessageToSlack'
import axios from 'axios'
import { cloneDeep } from 'lodash'

// const createNew = async (data) => {
//   console.log('üöÄ ~ file: content.service.js:7 ~ createNew ~ data:', data)
//   // data s·∫Ω c√≥ d·∫°ng :
//   // data = {
//   //   place_id: '123521543hfngdsh',
//   //   plainText: 'abc...',
//   //   plainTextMarkFormat: '### abc...'
//   // }
//   try {
//     // Data s·∫Ω ph·∫£i c√≥ th·∫±ng place_id ƒë·ªÉ bi·∫øt l∆∞u v√†o
//     // Ph·∫£i c√≥ plainTextMarkFormat v√¨ ƒë√¢y l√† c√°i ng∆∞·ªùi d√πng ƒë√≥ng g√≥p
//     // Ph·∫£i c√≥ plainText ƒë·ªÉ khi ng∆∞·ªùi d√πng g·ªçi xu√≥ng l·∫•y gi·ªçng n√≥i th√¨ s·∫Ω c√≥ plainText ƒë·ªÉ call text_to_speech API

//     // M·ªõi ƒë·∫ßu ss·∫Ω ph·∫£i t√¨m xem th·∫±ng place_id (n√≥ l√† th·∫±ng content_id trong model content) n√≥ c√≥ ch∆∞a ?
//     const existContent = await ContentModel.findOneByContentId(data.place_id)
//     console.log('üöÄ ~ file: content.service.js:28 ~ createNew ~ existContent:', existContent)
//     if (existContent) {
//       throw new Error('Content for this place was exsist.')
//     }

//     // Sau ƒë√≥ luuw v√† db content
//     const createdContent = await ContentModel.createNew({
//       content_id: data.place_id,
//       plainText: data.plainText,
//       plainTextMarkFormat: data.plainTextMarkFormat
//     })

//     let getContent
//     if (createdContent.insertedId) {
//       // khi l∆∞u xong ch√∫ng ta ph·∫£i c·∫≠p nh·∫≠t th·∫±ng map n·ªØa
//       // ch√∫ng ta l·∫•y objectId c·ªßa thnƒÉgf content l∆∞u v√†o lu√¥n v√† kh√¥ng c·∫ßn ch·ªù
//       await MapModel.updateByPlaceId(data.place_id, {
//         content_id: createdContent.insertedId.toString()
//       })
//       // Gi·ªù l·∫•y content ƒë·ªÉ tr·∫£ v·ªÅ
//       getContent = await ContentModel.findOneById(createdContent.insertedId.toString())
//     } else throw new Error('Could not create content')

//     // Gi·ªù tr·∫£ th·∫±ng content v·ªÅ
//     return getContent

//   } catch (error) {
//     throw new Error(error)
//   }
// }

// s·ª≠ d·ª•ng createNew khi m√† ng∆∞·ªùi d√πng ƒë√≥ng g√≥p b√†i vi·∫øt d∆∞·ªõi d·∫°ng markdown
const createNew = async (data) => {
  console.log('üöÄ ~ file: content.service.js:7 ~ createNew ~ data:', data)
  // data s·∫Ω c√≥ d·∫°ng :
  // data = {
  //   place_id: '123521543hfngdsh',
  //   plainText: {
  //   vi: "",
  //   en: ""
  // },
  //   plainTextMarkFormat: {
  //   vi: "",
  //   en: ""
  // }
  try {
    // Data s·∫Ω ph·∫£i c√≥ th·∫±ng place_id ƒë·ªÉ bi·∫øt l∆∞u v√†o
    // Ph·∫£i c√≥ plainTextMarkFormat v√¨ ƒë√¢y l√† c√°i ng∆∞·ªùi d√πng ƒë√≥ng g√≥p
    // Ph·∫£i c√≥ plainText ƒë·ªÉ khi ng∆∞·ªùi d√πng g·ªçi xu√≥ng l·∫•y gi·ªçng n√≥i th√¨ s·∫Ω c√≥ plainText ƒë·ªÉ call text_to_speech API

    // M·ªõi ƒë·∫ßu ss·∫Ω ph·∫£i t√¨m xem th·∫±ng place_id (n√≥ l√† th·∫±ng content_id trong model content) n√≥ c√≥ ch∆∞a ?
    const existContent = await ContentModel.findOneByContentId(data.place_id)
    // console.log('üöÄ ~ file: content.service.js:28 ~ createNew ~ existContent:', existContent)
    if (existContent) {
      throw new Error('Content for this place was exsist.')
    }

    const plainTextBase64 = {
      vi: {

      },
      en: {

      }
    }
    const fullTextToSpeech = ['VN_FEMALE_1', 'VN_MALE_1', 'EN_FEMALE_1', 'EN_MALE_1']
    await axios.all(
      fullTextToSpeech.map((textToSpeechId, index) => axios.post(
        `https://texttospeech.googleapis.com/v1/text:synthesize?key=${env.MAP_API_KEY}`,
        {
          input: {
            text: index < 2 ? data.plainText.vi : data.plainText.en
          },
          voice: {
            languageCode: TextToSpeechConstants[textToSpeechId].languageCode,
            name: TextToSpeechConstants[textToSpeechId].name
          },
          audioConfig: {
            audioEncoding: 'mp3'
          }
        }
      ))
    ).then(
      async (responses) => {
        responses.map((res, index) => {
          if (index < 2) {
            plainTextBase64['vi'][fullTextToSpeech[index]] = res.data.audioContent
          } else {
            plainTextBase64['en'][fullTextToSpeech[index]] = res.data.audioContent
          }
        })
      }
    ).catch(err => console.log(err))
    // console.log('üöÄ ~ file: content.service.js:55 ~ responses.map ~ plainTextBase64:', plainTextBase64)

    // Sau ƒë√≥ luuw v√† db content
    const createdContent = await ContentModel.createNew({
      content_id: data.place_id,
      plainText: data.plainText,
      plainTextMarkFormat: data.plainTextMarkFormat,
      plainTextBase64: plainTextBase64
    })

    let getContent
    if (createdContent.insertedId) {
      // khi l∆∞u xong ch√∫ng ta ph·∫£i c·∫≠p nh·∫≠t th·∫±ng map n·ªØa
      // ch√∫ng ta l·∫•y objectId c·ªßa thnƒÉgf content l∆∞u v√†o lu√¥n v√† kh√¥ng c·∫ßn ch·ªù
      await MapModel.updateByPlaceId(data.place_id, {
        content_id: createdContent.insertedId.toString()
      })
      // Gi·ªù l·∫•y content ƒë·ªÉ tr·∫£ v·ªÅ
      getContent = await ContentModel.findOneById(createdContent.insertedId.toString())
    } else throw new Error('Could not create content')

    // Gi·ªù tr·∫£ th·∫±ng content v·ªÅ
    return getContent

  } catch (error) {
    throw new Error(error)
  }
}

// s·ª≠ d·ª•ng getTextToSpeech khi m√† ng∆∞·ªùi click v√†o btn gi·ªçng ƒë·ªçc
const getTextToSpeech = async (data) => {
  console.log('üöÄ ~ file: content.service.js:7 ~ createNew ~ data:', data)
  // data s·∫Ω c√≥ d·∫°ng :
  // data = {
  //   place_id: '123521543hfngdsh',
  //   textToSpeechId: 'VN_FEMALE_1' || 'VN_FEMALE_2' || 'VN_MALE_1' || 'VN_MALE_2' || 'EN_FEMALE_1' || 'EN_FEMALE_2' || 'EN_MALE_1' || 'EN_MALE_2'
  // }
  try {
    // DATA C√ì TH·ªÇ L√Ä M·ªòT TRONG 8 GI·ªåNG ƒê·ªåC BAO G·ªíM C·∫¢ EN V√Ä VN
    // M·ªõi ƒë·∫ßu ss·∫Ω ph·∫£i t√¨m c√≥ gi·ªçng ƒë·ªçc ƒë√≥ ch∆∞a n·∫øu c√≥ th√¨ l·∫•y trae v·ªÅ lu√¥n

    let result
    const existContent = await ContentModel.findOneByContentId(data.place_id)
    console.log('üöÄ ~ file: content.service.js:72 ~ getTextToSpeech ~ existContent:', existContent)
    if (!existContent?.plainTextBase64[data.textToSpeechId]) {
      console.log('Vao call api')
      // Nghƒ©a l√† trong ƒë√¢y ch∆∞a c√≥ gi·ªçng n√≥i n√†o c·∫£ ch√∫ng ta s·∫Ω l·∫•y 1 gi·ªçng n√≥i tr∆∞·ªõc
      // sau ƒë√≥ l√† l·∫•y 7 gi·ªçng n√≥i sau ·ªü trong background job
      const textToSpeech = await TextToSpeechProvider.generateSpeech({
        text: existContent.plainText,
        languageCode: TextToSpeechConstants[data.textToSpeechId].languageCode,
        name: TextToSpeechConstants[data.textToSpeechId].name
      })
      console.log('üöÄ ~ file: content.service.js:81 ~ getTextToSpeech ~ textToSpeech:', textToSpeech)
      result = textToSpeech
      // Sau ƒë√≥ l∆∞u v√†o db content (kh√¥ng c·∫ßn ch·ªù)
      existContent.plainTextBase64[data.textToSpeechId] = textToSpeech
      // ContentModel.updateById(existContent._id.toString(), {
      //   plainTextBase64: existContent.plainTextBase64
      // })

      console.log('üöÄ ~ file: content.service.js:85 ~ getTextToSpeech ~ existContent:', existContent)
      // Sau ƒë√≥ g·ªçi 7 gi·ªçng n√≥i c√≤n l·∫°i
      // Ch·∫°y backgroundjobs
      // B∆∞·ªõc 1: Kh·ªüi t·∫°o m·ªôt h√†ng ƒë·ª£i
      let updatedTextToSpeech = RedisQueueProvider.generateQueue('updatedTextToSpeech')
      // B∆∞·ªõc 2: ƒê·ªãnh nghƒ©a ra nh·ªØng vi·ªác c·∫ßn l√†m trong ti·∫øn tr√¨nh h√†ng ƒë·ª£i
      updatedTextToSpeech.process(async (job, done) => {
        try {
          // job.data ·ªü ƒë√¢y ch√≠nh l√† updatedUser ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ b∆∞·ªõc 4
          const existContentClone = cloneDeep(job.data)
          const fullTextToSpeech = ['VN_FEMALE_1', 'VN_FEMALE_2', 'VN_MALE_1', 'VN_MALE_2', 'EN_FEMALE_1', 'EN_FEMALE_2', 'EN_MALE_1', 'EN_MALE_2']
          // L·ªçc ra nh·ªØng th·∫±ng ch∆∞a c√≥ gi·ªçng ƒë·ªçc
          const textToSpeechToCallApi = fullTextToSpeech.filter(textToSpeechId => textToSpeechId !== data.textToSpeechId)

          await axios.all(
            textToSpeechToCallApi.map(textToSpeechId => axios.post(
              `https://texttospeech.googleapis.com/v1/text:synthesize?key=${env.MAP_API_KEY}`,
              {
                input: {
                  text: existContentClone.plainText
                },
                voice: {
                  languageCode: TextToSpeechConstants[textToSpeechId].languageCode,
                  name: TextToSpeechConstants[textToSpeechId].name
                },
                audioConfig: {
                  audioEncoding: 'mp3'
                }
              }
            ))
          ).then(
            async (responses) => {
              responses.map((res, index) => {
                existContentClone.plainTextBase64[textToSpeechToCallApi[index]] = res.data.audioContent
              })

              const resultUpdated = await ContentModel.updateById(existContentClone._id.toString(), {
                plainTextBase64: existContentClone.plainTextBase64
              })
              done(null, resultUpdated)
            }
          ).catch(err => console.log(err))
        } catch (error) {
          done(new Error('Error from updatedTextToSpeech.process'))
        }
      })
      // B3: Check completed ho·∫∑c failed, t√πy tr∆∞·ªùng h·ª£p y√™u c·∫ßu m√† c·∫ßn c√°i event n√†y, ƒë·ªÉ b·∫Øn th√¥ng b√°o khi job ch·∫°y xong ch·∫≥ng h·∫°n
      // Nhi·ªÅu event kh√°c: https://github.com/OptimalBits/bull/blob/HEAD/REFERENCE.md#events
      updatedTextToSpeech.on('completed', (job, result) => {
        // B·∫Øn k·∫øt qu·∫£ v·ªÅ Slack
        SendMessageToSlack.sendToSlack(`Job v·ªõi id l√†: ${job.id} v√† t√™n job: *${job.queue.name}* ƒë√£ *xong* v√† k·∫øt qu·∫£ l√†: ${result}`)
      })

      updatedTextToSpeech.on('failed', (job, error) => {
        // B·∫Øn l·ªói v·ªÅ Slack ho·∫∑c Telegram ...
        SendMessageToSlack.sendToSlack(`Notification: Job v·ªõi id l√† ${job.id} v√† t√™n job l√† *${job.queue.name}* ƒë√£ b·ªã *l·ªói* \n\n ${error}`)
      })

      // B∆∞·ªõc 4: b∆∞·ªõc quan tr·ªçng cu·ªëi c√πng: Th√™m v√†o v√†o ƒë·ª£i Redis ƒë·ªÉ x·ª≠ l√Ω
      updatedTextToSpeech.add(existContent, {
        attempts: 2, // s·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu l·ªói
        backoff: 5000 //kho·∫£ng th·ªùi gian delay gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i job
      })
    } else {
      console.log('khong vao call api')
      // t√πy theo y√™u c·∫ßu tr·∫£ v·ªÅ ·ªü ƒë√¢y t ch·ªâ tr·∫£ v·ªÅ m·ªói textToSpeech
      result = {
        textToSpeech: existContent.plainTextBase64[data.textToSpeechId]
      }
    }

    return result

  } catch (error) {
    throw new Error(error)
  }
}

export const ContentService = {
  createNew,
  getTextToSpeech
}
