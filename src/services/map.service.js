import { MapModel } from '*/models/map.model'

import { PlacesSearchProvider } from '../providers/PlacesSearchProvider'
import { SendMessageToSlack } from '../providers/SendMessageToSlack'
import { RedisQueueProvider } from '*/providers/RedisQueueProvider'

import { MapApiStatus } from '../utilities/constants'


const getPlacesTextSearch = async (data) => {
  // data theo d·∫°ng {
  // query: string,
  // location: {
  // lat: number,
  // lng: number
  // }
  // }
  try {

    const result = await PlacesSearchProvider.getPlacesTextSearchAPI(data)

    let places
    if (result?.status === 'OK')
      places = result.results
    else
      throw new Error(MapApiStatus[result.status])

    // Phuong: N·∫øu result ch·ªâ c√≥ 1 ph·∫ßn t·ª≠ th√¨ l√†m theo c√°ch th√¥ng th∆∞·ªùng
    if (places.length === 1) {
      // Phuong: Check n√≥ t·ªìn t·∫°i ch∆∞a c√°i ƒë√£
      const existPlace = await MapModel.findOneByPlaceId(places[0].place_id)
      if (!existPlace) {
        // Phuong: oke l∆∞u v√†o db th√¥i
        await MapModel.createNew(places[0])
      }
    }
    // Phuong:  N·∫øu c√≥ tr√™n 2 ph·∫ßn t·ª≠ th√¨ cho n√≥ ch·∫°y background job
    else if (places.length > 1) {
      // Phuong:  B∆∞·ªõc 1: Kh·ªüi t·∫°o m·ªôt h√†ng ƒë·ª£i ƒë·ªÉ t·∫°o nhi·ªÅu places (d·ª± ki·∫øn 20 results cho m·ªói page)
      let createPlacesQueue = RedisQueueProvider.generateQueue('createPlacesQueue')
      // Phuong:  B∆∞·ªõc 2: ƒê·ªãnh nghƒ©a ra nh·ªØng vi·ªác c·∫ßn l√†m trong ti·∫øn tr√¨nh h√†ng ƒë·ª£i
      createPlacesQueue.process(async (job, done) => {
        try {
          // Phuong:  job.data ·ªü ƒë√¢y ch√≠nh l√† places ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ b∆∞·ªõc 4
          // let placesToCreate = []

          job.data.map(async (place, index) => {
            await PlacesSearchProvider.getPlaceDetailsAPI({
              place_id: place.place_id
            }).then(async result => {
              let data = result.result
              // const pitures = result.result.photos
              // if (pitures) {
              //   let photos = []
              //   await pitures.map(async photo => {
              //     await PlacesSearchProvider.getPlacePhotosAPI({
              //       photo_reference: photo.photo_reference
              //     }).then((photoBinary) => {
              //       photos.push(photoBinary)
              //     })
              //   })
              //   data.photos = photos
              // }
              // console.log('üöÄ ~ file: map.service.js:51 ~ job.data.map ~ result', result)

              console.log(`üöÄcreatePlacesQueue.process ~ result ${index}`, result)
              // placesToCreate.push(result)
              await MapModel.createNew(data)
            })
          })

          // console.log('üöÄ ~ file: map.service.js:46 ~ createPlacesQueue.process ~ placesToCreate', placesToCreate)
          // const placesCreated = await MapModel.createManyPlaces(placesToCreate)
          // done(null, placesCreated)
          done(null, 'Successfully created')
        } catch (error) {
          done(new Error('Error from createPlacesQueue.process'))
        }
      })
      // Phuong: B3: Check completed ho·∫∑c failed, t√πy tr∆∞·ªùng h·ª£p y√™u c·∫ßu m√† c·∫ßn c√°i event n√†y, ƒë·ªÉ b·∫Øn th√¥ng b√°o khi job ch·∫°y xong ch·∫≥ng h·∫°n
      // Phuong: Nhi·ªÅu event kh√°c: https:// Phuong: github.com/OptimalBits/bull/blob/HEAD/REFERENCE.md#events
      createPlacesQueue.on('completed', (job, result) => {
        // Phuong  B·∫Øn k·∫øt qu·∫£ v·ªÅ Slack
        SendMessageToSlack.sendToSlack(`Job v·ªõi id l√†: ${job.id} v√† t√™n job: *${job.queue.name}* ƒë√£ *xong* v√† k·∫øt qu·∫£ l√†: ${result}`)
      })

      createPlacesQueue.on('failed', (job, error) => {
        // Phuong: B·∫Øn l·ªói v·ªÅ Slack ho·∫∑c Telegram ...
        SendMessageToSlack.sendToSlack(`Notification: Job v·ªõi id l√† ${job.id} v√† t√™n job l√† *${job.queue.name}* ƒë√£ b·ªã *l·ªói* \n\n ${error}`)
      })

      // Phuong: B∆∞·ªõc 4: b∆∞·ªõc quan tr·ªçng cu·ªëi c√πng: Th√™m v√†o v√†o ƒë·ª£i Redis ƒë·ªÉ x·ª≠ l√Ω
      createPlacesQueue.add(places, {
        attempts: 1, // Phuong: s·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu l·ªói
        backoff: 5000 // Phuong: kho·∫£ng th·ªùi gian delay gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i job
      })
    }

    return places
  } catch (error) {
    throw new Error(error)
  }
}

export const MapService = {
  getPlacesTextSearch
}
