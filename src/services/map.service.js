import { MapModel } from '*/models/map.model'

import { PlacesSearchProvider } from '../providers/PlacesSearchProvider'
import { SendMessageToSlack } from '../providers/SendMessageToSlack'
import { RedisQueueProvider } from '*/providers/RedisQueueProvider'

import { FilterConstants, MapApiStatus } from '../utilities/constants'
import axios from 'axios'
import { env } from '*/config/environtment'
import { Buffer } from 'buffer'
import { cloneDeep, sortBy } from 'lodash'
import { filterRadiusProminenceOrNearBy, sortByRatingHighToLow, sortByRatingLowToHigh, sortByStarHighToLow, sortByStarLowToHigh } from '../utilities/function'

const getPlacesTextSearch = async (data) => {
  console.log('üöÄ ~ file: map.service.js:14 ~ getPlacesTextSearch ~ data', data)
  // data theo d·∫°ng {
  // type: string,
  // sortBy: string,
  // radius: string,
  // query: string,
  // location: {
  // latitude: number,
  // longitude: number
  // },

  // }
  try {
    const startTime = Date.now()
    let sortBy = data.sortBy
    delete data.sortBy

    if (sortBy === FilterConstants.sortBy.PROMINENCE) {
      // X√≥a radius v√† th√™m v√†o rankBy
      delete data.radius
      data.rankby = env.RANKBY_PROMINENCE
    } else if (sortBy === FilterConstants.sortBy.NEAR_BY) {
      // X√≥a radius v√† th√™m v√†o rankBy
      delete data.radius
      data.rankby = env.RANKBY_DISTANCE
    }

    const result = await PlacesSearchProvider.getPlacesTextSearchAPI(data)

    let places
    let nextPageToken

    if (result?.status === 'OK') {
      nextPageToken = result.next_page_token
      places = result.results
    }
    else
      throw new Error(MapApiStatus[result.status])

    // // Phuong: N·∫øu result ch·ªâ c√≥ 1 ph·∫ßn t·ª≠ th√¨ l√†m theo c√°ch th√¥ng th∆∞·ªùng
    // if (places.length === 1) {
    //   // Phuong: Check n√≥ t·ªìn t·∫°i ch∆∞a c√°i ƒë√£
    //   const existPlace = await MapModel.findOneByPlaceId(places[0].place_id)
    //   if (!existPlace) {
    //     // Phuong: oke l∆∞u v√†o db th√¥i
    //     await MapModel.createNew(places[0])
    //   }
    // }
    // // Phuong:  N·∫øu c√≥ tr√™n 2 ph·∫ßn t·ª≠ th√¨ cho n√≥ ch·∫°y background job
    // else if (places.length > 1) {
    //   // Phuong:  B∆∞·ªõc 1: Kh·ªüi t·∫°o m·ªôt h√†ng ƒë·ª£i ƒë·ªÉ t·∫°o nhi·ªÅu places (d·ª± ki·∫øn 20 results cho m·ªói page)
    //   let createPlacesQueue = RedisQueueProvider.generateQueue('createPlacesQueue')
    //   // Phuong:  B∆∞·ªõc 2: ƒê·ªãnh nghƒ©a ra nh·ªØng vi·ªác c·∫ßn l√†m trong ti·∫øn tr√¨nh h√†ng ƒë·ª£i
    //   createPlacesQueue.process(async (job, done) => {
    //     try {
    //       // Phuong:  job.data ·ªü ƒë√¢y ch√≠nh l√† places ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ b∆∞·ªõc 4

    //       let placesDetails = []
    //       const placeIds = []
    //       job.data.map(place => placeIds.push(place.place_id))
    //       // console.log('üöÄ ~ file: map.service.js:48 ~ createPlacesQueue.process ~ placeIds', placeIds)

    //       // N√≥ ƒë∆∞·ª£c g·ªçi l√† parallel axios api
    //       // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
    //       axios.all(
    //         placeIds.map(async placeId => axios.get(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&language=vi&key=${env.MAP_API_KEY}`))
    //       ).then(
    //         async (datas) => {

    //           datas.map(async data => {
    //             const photosReference = []
    //             const profilePhotosReference = []

    //             let newPlace = data?.data?.result
    //             // Ki·ªÉm tra xem place_id n√≥ c√≥ trong db hay ch∆∞a
    //             const existPlace = await MapModel.findOneByPlaceId(newPlace.place_id)
    //             if (!existPlace) {
    //               // C√≥ th·ªÉ x·∫£y ra TH l√† kh√¥ng c√≥ photos n·ªØa n√™n c·∫ßn ph·∫£i check k·ªπ
    //               if (data?.data?.result?.photos) {
    //                 data?.data?.result?.photos.map(photo => photosReference.push(photo.photo_reference))
    //                 // console.log('üöÄ ~ file: map.service.js:60 ~ createPlacesQueue.process ~ photosReference', photosReference)

    //                 // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
    //                 await axios.all(
    //                   photosReference.map(async photoReference => axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${photoReference}&key=${env.MAP_API_KEY}`, { responseType: 'arraybuffer' }))
    //                 ).then(
    //                   (datas) => {
    //                     let photos = []
    //                     datas.map(res => {
    //                       const urlBase64Decode = Buffer.from(res.data, 'binary').toString('base64')
    //                       photos.push(urlBase64Decode)
    //                     })
    //                     // console.log('üöÄ ~ file: map.service.js:76 ~ createPlacesQueue.process ~ photos', photos)
    //                     // ƒë√£ c√≥ photos th√¨ ƒë·ªÅ l√™n th·∫±ng photo trong k·∫øt qu·∫£ tr·∫£ v·ªÅ
    //                     if (photos.length > 0) {
    //                       newPlace = {
    //                         ...newPlace,
    //                         photos: photos
    //                       }
    //                     }
    //                   }
    //                 )
    //               }

    //               if (data?.data?.result?.reviews) {
    //                 data?.data?.result?.reviews.map(review => profilePhotosReference.push(review.profile_photo_url))
    //                 // console.log('üöÄ ~ file: map.service.js:60 ~ createPlacesQueue.process ~ profilePhotosReference', profilePhotosReference)

    //                 // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
    //                 await axios.all(
    //                   profilePhotosReference.map(async photoReference => axios.get(photoReference, { responseType: 'arraybuffer' }))
    //                 ).then(
    //                   (datas) => {
    //                     let photos = []
    //                     datas.map(res => {
    //                       const urlBase64Decode = Buffer.from(res.data, 'binary').toString('base64')
    //                       photos.push(urlBase64Decode)
    //                     })
    //                     // console.log('üöÄ ~ file: map.service.js:76 ~ createPlacesQueue.process ~ photos', photos)
    //                     // ƒë√£ c√≥ photos th√¨ ƒë·ªÅ l√™n th·∫±ng photo trong k·∫øt qu·∫£ tr·∫£ v·ªÅ
    //                     if (photos.length > 0) {
    //                       photos.map((pt, index) => {
    //                         newPlace.reviews[index].profile_photo_url = pt
    //                       })
    //                     }
    //                   }
    //                 )
    //               }

    //               placesDetails.push(newPlace)
    //             } else {
    //               console.log('Place ƒë√£ c√≥ ...')
    //             }
    //           })
    //         }
    //       )

    //       // B√¢y gi·ªù l∆∞u v√†o database v·ªõi 1 m·∫£ng obj c·ªßa placesDetails
    //       // B·ªüi v√¨ m√¨nh ƒëang call api 20 v√≤ng l·∫∑p xong trong 20 v√≤ng l·∫∑p, m·ªói k·∫øt qu·∫£ tr·∫£ v·ªÅ l·∫°i call
    //       // ti·∫øp 5 api (ƒë·ªÉ l·∫•y ƒë∆∞·ª£c ·∫£nh d·∫°ng binary xong r·ªìi chuy·ªÉn n√≥ v·ªÅ base64)
    //       // V·∫•n ƒë·ªÅ l·ªõn nh·∫•t l√† khi call ƒë∆∞·ª£c 20 th·∫±ng place r, trong m·ªói th·∫±ng place call api ƒë·∫øn photo c·ªßa n√≥ nh∆∞ng n√≥ c·∫ßn th·ªùi gian ƒë·ªÉ n·∫°p photo v·ªÅ
    //       // 20 th·∫±ng place m·ªói 1 place trung b√¨nh 5 photo v n√≥ l√†m c√¥ng vi·ªác call api 100 l·∫ßn
    //       //  V√¨ v ·ªü ƒë√¢y tui set th·ªùi gian l√† 10s ƒë·ªÉ ch·∫°y cho 20 place v√† h∆°n 100 photo
    //       // N·∫øu kh√¥ng ƒë·ªÉ 10s n√≥ s·∫Ω ch·∫°y nh∆∞ng photo kh√¥ng ƒë∆∞·ª£c chuy·ªÉn v·ªÅ base64 :(((
    //       // C√≥ c√°ch n√†o hay h∆°n th√¨ say me nha
    //       setTimeout(async () => {
    //         if (placesDetails.length > 0) {
    //           const placeDetailsCreated = await MapModel.createManyPlaces(placesDetails)
    //           done(null, placeDetailsCreated)
    //         } else {
    //           done(null, 'T·∫•t c·∫£ c√°c Place ƒë·ªÅu ƒë√£ c√≥ trong db!')
    //         }
    //       }, 20000)
    //     } catch (error) {
    //       done(new Error('Error from createPlacesQueue.process'))
    //     }
    //   })
    //   // Phuong: B3: Check completed ho·∫∑c failed, t√πy tr∆∞·ªùng h·ª£p y√™u c·∫ßu m√† c·∫ßn c√°i event n√†y, ƒë·ªÉ b·∫Øn th√¥ng b√°o khi job ch·∫°y xong ch·∫≥ng h·∫°n
    //   // Phuong: Nhi·ªÅu event kh√°c: https:// Phuong: github.com/OptimalBits/bull/blob/HEAD/REFERENCE.md#events
    //   createPlacesQueue.on('completed', (job, result) => {
    //     // Phuong  B·∫Øn k·∫øt qu·∫£ v·ªÅ Slack
    //     SendMessageToSlack.sendToSlack(`Job v·ªõi id l√†: ${job.id} v√† t√™n job: *${job.queue.name}* ƒë√£ *xong* v√† k·∫øt qu·∫£ l√†: ${result}> T√°c v·ª• ho√†n th√†nh trong ${ Date.now() - startTime}s`)
    //   })

    //   createPlacesQueue.on('failed', (job, error) => {
    //     // Phuong: B·∫Øn l·ªói v·ªÅ Slack ho·∫∑c Telegram ...
    //     SendMessageToSlack.sendToSlack(`Notification: Job v·ªõi id l√† ${job.id} v√† t√™n job l√† *${job.queue.name}* ƒë√£ b·ªã *l·ªói* \n\n ${error}`)
    //   })

    //   // Phuong: B∆∞·ªõc 4: b∆∞·ªõc quan tr·ªçng cu·ªëi c√πng: Th√™m v√†o v√†o ƒë·ª£i Redis ƒë·ªÉ x·ª≠ l√Ω
    //   createPlacesQueue.add(places, {
    //     attempts: 0, // Phuong: s·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu l·ªói
    //     backoff: 5000 // Phuong: kho·∫£ng th·ªùi gian delay gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i job
    //   })
    // }

    let photosToReturn = []

    // v√¨ c√°c t√°c v·ª• background job ƒë∆∞·ª£c ch·∫°y sau khi data tr·∫£ v·ªÅ cho ng∆∞·ªùi d√πng, v√† d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ places
    // n·∫øu th·∫±ng places b·ªã bi·∫øn ƒë·ªïi th√¨ th·∫±ng background job n√†y s·∫Ω l·∫•y d·ªØ li·ªáu b·ªã bi·∫øn ƒë·ªïi ƒë√≥ ƒëem ƒëi x·ª≠ l√Ω
    // do m√¨nh mu·ªën d√πng d·ªØ li·ªáu c≈© n√™n ph·∫£i cloneDeep d·ªØ li·ªáu khi tr·∫£ v·ªÅ
    let placesClone = cloneDeep(places)

    placesClone.map(place => place.photos && photosToReturn.push(place.photos[0].photo_reference))
    // console.log('üöÄ ~ file: map.service.js:32 ~ getPlacesTextSearch ~ photosToReturn', photosToReturn)

    // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
    await axios.all(
      photosToReturn.map(async photo => axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${photo}&key=${env.MAP_API_KEY}`, { responseType: 'arraybuffer' }))
    ).then(
      (datas) => {
        let photos = []
        datas.map(res => {
          const urlBase64Decode = Buffer.from(res.data, 'binary').toString('base64')
          photos.push(urlBase64Decode)
        })

        placesClone.map((place) => {
          if (photos.length === 0)
            return
          if (place.photos) {
            place.photos = [photos[0]]
            photos.shift()
          }
        })
      }
    )

    const location = {
      lat: data.location.latitude,
      lng: data.location.longitude
    }

    if (sortBy === FilterConstants.sortBy.PROMINENCE || sortBy === FilterConstants.sortBy.NEAR_BY) {
      const resultFilterRadius = filterRadiusProminenceOrNearBy(placesClone, location, parseInt(data.radius))
      placesClone = resultFilterRadius.arrPlace
      if (resultFilterRadius.isDeleteNextPageToken)
        nextPageToken = null
    } else if (sortBy === FilterConstants.sortBy.STAR_LOW_TO_HIGH) {
      placesClone = sortByStarLowToHigh(placesClone)
    } else if (sortBy === FilterConstants.sortBy.STAR_HIGH_TO_LOW) {
      placesClone = sortByStarHighToLow(placesClone)
    } else if (sortBy === FilterConstants.sortBy.RATING_LOW_TO_HIGH) {
      placesClone = sortByRatingLowToHigh(placesClone)
    } else if (sortBy === FilterConstants.sortBy.RATING_HIGH_TO_LOW) {
      placesClone = sortByRatingHighToLow(placesClone)
    }

    return {
      arrPlace: placesClone,
      nextPageToken: nextPageToken
    }

  } catch (error) {
    throw new Error(error)
  }
}

const getPlaceDetails = async (data) => {
  // data c√≥ d·∫°ng:
  // data = {
  //   placeId: 'XXXXXXXXXX'
  // }
  try {
    let placeTranform
    // Ki·ªÉm tra trong database xem c√≥ place_id n√†y ch∆∞a
    const existPlace = await MapModel.findOneByPlaceId(data.placeId)
    if (!existPlace) {
      // L·∫•y d·ªØ v·ªÅ place details tr√™n google map
      const result = await PlacesSearchProvider.getPlaceDetailsAPI({
        place_id: data.placeId
      })

      placeTranform = result.result

      // Bi·∫øn ƒë·ªïi c√°c photo c√≥ Db th√†nh img64
      // C√≥ th·ªÉ x·∫£y ra TH l√† kh√¥ng c√≥ photos n·ªØa n√™n c·∫ßn ph·∫£i check k·ªπ
      if (placeTranform.photos) {
        let photosReference = []

        placeTranform.photos.map(photo => photosReference.push(photo.photo_reference))

        // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
        await axios.all(
          photosReference.map(async photoReference => axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${photoReference}&key=${env.MAP_API_KEY}`, { responseType: 'arraybuffer' }))
        ).then(
          (datas) => {
            let photos = []
            datas.map(res => {
              const urlBase64Decode = Buffer.from(res.data, 'binary').toString('base64')
              photos.push(urlBase64Decode)
            })
            if (photos.length > 0)
              placeTranform.photos = photos
          }
        )
      }

      if (placeTranform.reviews) {
        let profilePhotosReference = []
        placeTranform.reviews.map(review => profilePhotosReference.push(review.profile_photo_url))

        // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
        await axios.all(
          profilePhotosReference.map(async photoReference => axios.get(photoReference, { responseType: 'arraybuffer' }))
        ).then(
          (datas) => {
            let photos = []
            datas.map(res => {
              const urlBase64Decode = Buffer.from(res.data, 'binary').toString('base64')
              photos.push(urlBase64Decode)
            })
            // console.log('üöÄ ~ file: map.service.js:76 ~ createPlacesQueue.process ~ photos', photos)
            // ƒë√£ c√≥ photos th√¨ ƒë·ªÅ l√™n th·∫±ng photo trong k·∫øt qu·∫£ tr·∫£ v·ªÅ
            if (photos.length > 0) {
              photos.map((pt, index) => {
                placeTranform.reviews[index].profile_photo_url = pt
              })
            }
          }
        )
      }
      // Phuong: oke l∆∞u v√†o db th√¥i. Kh√¥ng c·∫ßn ƒë·ª£i
      // MapModel.createNew(placeTranform)
    } else {
      placeTranform = existPlace
    }
    // Sau ƒë√≥ tr·∫£ v·ªÅ cho user thoy
    return placeTranform

  } catch (error) {
    // console.log(error)
    throw new Error(error)
  }
}

export const MapService = {
  getPlacesTextSearch,
  getPlaceDetails
}
