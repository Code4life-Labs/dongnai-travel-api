import { MapModel } from 'models/map.model'

import { PlacesSearchProvider } from 'providers/PlacesSearchProvider'
import { SendMessageToSlack } from 'providers/SendMessageToSlack'
import { RedisQueueProvider } from 'providers/RedisQueueProvider'

import { FilterConstants, MapApiStatus } from 'utilities/constants'
import { getExpectedFieldsProjection } from 'utilities/function'
import axios from 'axios'
import { env } from 'config/environtment'
import { Buffer } from 'buffer'
import { cloneDeep, sortBy } from 'lodash'
import { filterRadiusProminenceOrNearBy, sortByRatingHighToLow, sortByRatingLowToHigh, sortByStarHighToLow, sortByStarLowToHigh } from 'utilities/function'
import { OpenRouteServiceProvider } from 'providers/OpenRouteServiceProvider'
import { CloudinaryProvider } from 'providers/CloudinaryProvider'
import { PhotosModel } from 'models/photos.model'
import { ReviewsModel } from 'models/reviews.model'
import { OpenWeatherProvider } from 'providers/OpenWeatherProvider'
import { UserModel } from 'models/user.model'

/**
 * @typedef GetPlacesServiceProps
 * @property {number} limit
 * @property {number} skip
 * @property {string} fields
 * @property {string} filter
 */

/**
 * Service n√†y d√πng ƒë·ªÉ l·∫•y ra t·∫•t c·∫£ c√°c places, tuy nhi√™n l√† n√™n d√πng n√≥ ƒë·ªÉ l·∫•y m·ªôt s·ªë l∆∞·ª£ng
 * c√≥ h·∫°n n√†o ƒë√≥ th√¥i.
 * @param {GetPlacesServiceProps} data L√† m·ªôt object l·∫•y t·ª´ `req.query`.
 * @returns {Promise<WithId<Document>[] | undefined>}
 */
const getPlaces = async (data) => {
  // Data c·ªßa th·∫±ng n√†y n√≥ l√† query, kh√¥ng ph·∫£i body.
  /*
    query = {
      filter: "" C√°i n√†y r·ªóng b·ªüi v√¨ m√¨nh ƒëang c·∫ßn t√¨m t·∫•t c·∫£. N·∫øu c√≥ th√¨ ch·ªâ c√≥ sort by th√¥i.
      limit: 10,
      skip: 0,
      fields: "name;plus_code"
    }
  */
  try {
    let { limit, skip, fields } = data
    console.log(data)
    let places = await MapModel.findManyInLimit({}, getExpectedFieldsProjection(fields), parseInt(limit), parseInt(skip))
    return places
  } catch (error) {
    return undefined
  }
}

/**
 * Service n√†y d√πng ƒë·ªÉ l·∫•y ra t·∫•t c·∫£ c√°c places, tuy nhi√™n l√† n√™n d√πng n√≥ ƒë·ªÉ l·∫•y m·ªôt s·ªë l∆∞·ª£ng
 * c√≥ h·∫°n n√†o ƒë√≥ th√¥i. Service n√†y d√πng ph∆∞∆°ng th·ª©c `findManyInLimitWithPipelines`.
 * @param {GetPlacesServiceProps} data L√† m·ªôt object l·∫•y t·ª´ `req.query`.
 * @returns {Promise<WithId<Document>[] | undefined>}
 */
const getPlacesWithPipeline = async (query) => {
  try {
    let { limit, skip, fields, filter } = query
    let user
    if (query.userId) user = await UserModel.findOneById(query.userId)
    let data = {
      filter,
      fields,
      limit: parseInt(limit),
      skip: parseInt(skip),
      user
    }
    let places = await MapModel.findManyInLimitWithPipeline(data)
    // let photoPromises = places.map(place => PhotosModel.findOneByPlaceId(place.place_id))
    // let photos = await Promise.all(photoPromises)

    // Th√™m photo v√†o cho place
    // for(let place of places) {
    //   let photo = photos.find(photo => photo.place_photos_id);
    // }

    return places
  } catch (error) {
    return undefined
  }
}

const getPlaceDetailWithPipeline = async (query) => {
  try {
    let data = {
      placeId: query.placeId,
      fields: query.fields,
      lang: query.lang ? query.lang : 'en'
    }
    let user
    if (query.userId) user = await UserModel.findOneById(query.userId)
    const place = await MapModel.findOneWithPipeline(data, user)
    return place
  } catch (error) {
    return undefined
  }
}

const getPlacesTextSearch = async (data) => {
  console.log('üöÄ ~ file: map.service.js:14 ~ getPlacesTextSearch ~ data', data)
  // data theo d·∫°ng {
  // type: string,
  // sortBy: string,
  // radius: string,
  // query: string,
  // location: {
  // latitude: number,
  // longitude: number
  // },

  // }
  try {
    const startTime = Date.now()
    let sortBy = data.sortBy
    delete data.sortBy

    if (sortBy === FilterConstants.sortBy.PROMINENCE) {
      // X√≥a radius v√† th√™m v√†o rankBy
      delete data.radius
      data.rankby = env.RANKBY_PROMINENCE
    } else if (sortBy === FilterConstants.sortBy.NEAR_BY) {
      // X√≥a radius v√† th√™m v√†o rankBy
      delete data.radius
      data.rankby = env.RANKBY_DISTANCE
    }

    const result = await PlacesSearchProvider.getPlacesTextSearchAPI(data)

    let places
    let nextPageToken

    if (result?.status === 'OK') {
      nextPageToken = result.next_page_token
      places = result.results
    }
    else
      throw new Error(MapApiStatus[result.status])

    // Phuong: N·∫øu result ch·ªâ c√≥ 1 ph·∫ßn t·ª≠ th√¨ l√†m theo c√°ch th√¥ng th∆∞·ªùng
    if (places.length === 1) {
      // Phuong: Check n√≥ t·ªìn t·∫°i ch∆∞a c√°i ƒë√£
      const existPlace = await MapModel.findOneByPlaceId(places[0].place_id)
      if (!existPlace) {
        // Phuong: oke l∆∞u v√†o db th√¥i
        await MapModel.createNew(places[0])
      }
    }
    // Phuong:  N·∫øu c√≥ tr√™n 2 ph·∫ßn t·ª≠ th√¨ cho n√≥ ch·∫°y background job
    else if (places.length > 1) {
      try {
        // Phuong:  B∆∞·ªõc 1: Kh·ªüi t·∫°o m·ªôt h√†ng ƒë·ª£i ƒë·ªÉ t·∫°o nhi·ªÅu places (d·ª± ki·∫øn 20 results cho m·ªói page)
        let createPlacesQueue = RedisQueueProvider.generateQueue('createPlacesQueue')
        // Phuong:  B∆∞·ªõc 2: ƒê·ªãnh nghƒ©a ra nh·ªØng vi·ªác c·∫ßn l√†m trong ti·∫øn tr√¨nh h√†ng ƒë·ª£i
        createPlacesQueue.process(async (job, done) => {
          try {
          // Phuong:  job.data ·ªü ƒë√¢y ch√≠nh l√† places ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ b∆∞·ªõc 4

            let placesDetails = []
            const placeIds = []
            job.data.map(place => placeIds.push(place.place_id))
            // console.log('üöÄ ~ file: map.service.js:48 ~ createPlacesQueue.process ~ placeIds', placeIds)

            // N√≥ ƒë∆∞·ª£c g·ªçi l√† parallel axios api
            // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
            // G·ªçi h·∫øt api place details th√¥ng qua c√°c placeId b·∫±ng c√°ch g·ªçi ti·∫øn tr√¨nh song song
            axios.all(
              placeIds.map(placeId => axios.get(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&language=vi&key=${env.MAP_API_KEY}`))
            ).then(datas => {

              datas.map(async data => {
                const photosReference = []
                const profilePhotosReference = []

                let newPlace = data?.data?.result

                // Ki·ªÉm tra xem place_id n√≥ c√≥ trong db hay ch∆∞a
                const existPlace = await MapModel.findOneByPlaceId(newPlace.place_id)
                console.log('üöÄ ~ file: map.service.js:96 ~ createPlacesQueue.process ~ newPlace.place_id:', newPlace.place_id)
                if (!existPlace) {
                // C√≥ th·ªÉ x·∫£y ra TH l√† kh√¥ng c√≥ photos n·ªØa n√™n c·∫ßn ph·∫£i check k·ªπ
                // X√≥a th·∫±ng photos trong newPlace
                  const photosClone = cloneDeep(data?.data?.result?.photos)
                  delete newPlace.photos
                  if (photosClone) {

                    photosClone.map(photo => photosReference.push({
                      height: Math.floor(photo.height),
                      width: Math.floor(photo.width),
                      photo_reference: photo.photo_reference
                    }))
                    // console.log('üöÄ ~ file: map.service.js:60 ~ createPlacesQueue.process ~ photosReference', photosReference)

                    // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
                    // g·ªçi ti·∫øn tr√¨nh song ƒë·ªÉ l·∫•y lo·∫°t d·ªØ li·ªáu c·ªßa photos
                    await axios.all(
                      photosReference.map(photoReference => axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=${photoReference.width}&maxheight=${photoReference.height}&photo_reference=${photoReference.photo_reference}&key=${env.MAP_API_KEY}`, { responseType: 'arraybuffer' }))
                    ).then(
                      async (datas) => {
                        let photoBuffers = []
                        datas.map(res => photoBuffers.push(res.data))
                        console.log('s·ªë photos c·ªßa place photos buffer:', photoBuffers.length)

                        let resPhotos = await CloudinaryProvider.streamUploadMutiple(photoBuffers, 'place_photos')
                        let photosUrlToUpdate = []

                        resPhotos.map(res => photosUrlToUpdate.push(res.url))
                        console.log('S·ªë photos c·ªßa place photos khi ƒë·∫©y l√™n cloudinary:', photosUrlToUpdate.length)
                        // photosToUpdate s·∫Ω c·∫≠p nh·∫≠t v√†o database
                        // Kh√¥ng c·∫ßn ch·ªù n√†o xong n√≥ t·ª± create trong DB
                        const photosUpdated = await PhotosModel.createNew({
                          place_photos_id: newPlace.place_id,
                          photos: photosUrlToUpdate
                        })
                        //  th√™m tr∆∞·ªùng photoId trong newPlace
                        newPlace.photos_id = photosUpdated.insertedId.toString()
                      }
                    ).catch(err => console.log('L·ªói khi g·ªçi place photos', err))
                  }

                  // X√≥a th·∫±ng reviews trong newPlace
                  const reviewsClone = cloneDeep(data?.data?.result?.reviews)
                  delete newPlace.reviews
                  if (reviewsClone) {
                    reviewsClone.map(review => profilePhotosReference.push(review.profile_photo_url))
                    // console.log('üöÄ ~ file: map.service.js:60 ~ createPlacesQueue.process ~ profilePhotosReference', profilePhotosReference)

                    // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
                    await axios.all(
                      profilePhotosReference.map(photoReference => axios.get(photoReference, { responseType: 'arraybuffer' }))
                    ).then(
                      async (datas) => {
                        let photoBuffers = []
                        datas.map(res => photoBuffers.push(res.data))
                        console.log('s·ªë photos c·ªßa place reviews buffer:', photoBuffers.length)

                        let resPhotos = await CloudinaryProvider.streamUploadMutiple(photoBuffers, 'place_reviews')
                        console.log('S·ªë photos c·ªßa place reviews khi ƒë·∫©y l√™n cloudinary:', resPhotos.length)

                        reviewsClone.map((review, index) => review.profile_photo_url = resPhotos[index].url)


                        // photosToUpdate s·∫Ω c·∫≠p nh·∫≠t v√†o database
                        const photosUpdated = await ReviewsModel.createNew({
                          place_reviews_id: newPlace.place_id,
                          reviews: reviewsClone
                        })
                        //  th√™m tr∆∞·ªùng photoId trong newPlace
                        newPlace.reviews_id = photosUpdated.insertedId.toString()
                      }
                    ).catch(err => console.log('L·ªói ·ªü g·ªçi photo reviews', err))
                  }
                  MapModel.createNew(newPlace)
                  placesDetails.push(newPlace)
                } else {
                  console.log('Place ƒë√£ c√≥ ...')
                }
              })

            }).catch(err => console.log('L·ªói khi g·ªçi place details', err))

            // B√¢y gi·ªù l∆∞u v√†o database v·ªõi 1 m·∫£ng obj c·ªßa placesDetails
            // B·ªüi v√¨ m√¨nh ƒëang call api 20 v√≤ng l·∫∑p xong trong 20 v√≤ng l·∫∑p, m·ªói k·∫øt qu·∫£ tr·∫£ v·ªÅ l·∫°i call
            // ti·∫øp 5 api (ƒë·ªÉ l·∫•y ƒë∆∞·ª£c ·∫£nh d·∫°ng binary xong r·ªìi chuy·ªÉn n√≥ v·ªÅ base64)
            // V·∫•n ƒë·ªÅ l·ªõn nh·∫•t l√† khi call ƒë∆∞·ª£c 20 th·∫±ng place r, trong m·ªói th·∫±ng place call api ƒë·∫øn photo c·ªßa n√≥ nh∆∞ng n√≥ c·∫ßn th·ªùi gian ƒë·ªÉ n·∫°p photo v·ªÅ
            // 20 th·∫±ng place m·ªói 1 place trung b√¨nh 5 photo v n√≥ l√†m c√¥ng vi·ªác call api 100 l·∫ßn
            //  V√¨ v ·ªü ƒë√¢y tui set th·ªùi gian l√† 10s ƒë·ªÉ ch·∫°y cho 20 place v√† h∆°n 100 photo
            // N·∫øu kh√¥ng ƒë·ªÉ 10s n√≥ s·∫Ω ch·∫°y nh∆∞ng photo kh√¥ng ƒë∆∞·ª£c chuy·ªÉn v·ªÅ base64 :(((
            // C√≥ c√°ch n√†o hay h∆°n th√¨ say me nha
            setTimeout(async () => {
              if (placesDetails.length > 0) {
                // const placeDetailsCreated = await MapModel.createManyPlaces(placesDetails)
                done(null, `T·∫•t c·∫£ ${placesDetails.length} Place ƒë·ªÅu ƒë√£ c√≥ trong db!`)
              } else {
                done(null, `${placesDetails.length} Place ƒë·ªÅu ƒë√£ c√≥ trong db!`)
              }
            }, 40000)
            // done(null, 'Ti·∫øn tr√¨nh ƒë√£ xong!')
          } catch (error) {
            done(new Error('Error from createPlacesQueue.process'))
          }
        })
        // Phuong: B3: Check completed ho·∫∑c failed, t√πy tr∆∞·ªùng h·ª£p y√™u c·∫ßu m√† c·∫ßn c√°i event n√†y, ƒë·ªÉ b·∫Øn th√¥ng b√°o khi job ch·∫°y xong ch·∫≥ng h·∫°n
        // Phuong: Nhi·ªÅu event kh√°c: https:// Phuong: github.com/OptimalBits/bull/blob/HEAD/REFERENCE.md#events
        createPlacesQueue.on('completed', (job, result) => {
        // Phuong  B·∫Øn k·∫øt qu·∫£ v·ªÅ Slack
          createPlacesQueue.close()
          console.log('Close queue')
          SendMessageToSlack.sendToSlack(`Job v·ªõi id l√†: ${job.id} v√† t√™n job: *${job.queue.name}* ƒë√£ *xong* v√† k·∫øt qu·∫£ l√†: ${result}> T√°c v·ª• ho√†n th√†nh trong ${ Date.now() - startTime}s`)
        })

        createPlacesQueue.on('failed', (job, error) => {
        // Phuong: B·∫Øn l·ªói v·ªÅ Slack ho·∫∑c Telegram ...
          createPlacesQueue.close()
          console.log('Close queue')
          SendMessageToSlack.sendToSlack(`Notification: Job v·ªõi id l√† ${job.id} v√† t√™n job l√† *${job.queue.name}* ƒë√£ b·ªã *l·ªói* \n\n ${error}`)
        })

        // Phuong: B∆∞·ªõc 4: b∆∞·ªõc quan tr·ªçng cu·ªëi c√πng: Th√™m v√†o v√†o ƒë·ª£i Redis ƒë·ªÉ x·ª≠ l√Ω
        createPlacesQueue.add(places, {
        })
      } catch (error) {
        throw new Error(`Error when call backgound job: ${error}`)
      }
    }

    console.log('====================================================================================================')
    console.log('B·∫Øt ƒë·∫ßu g·ªçi ƒë·ªÉ l·∫•y base 64')
    let photosToReturn = []

    // v√¨ c√°c t√°c v·ª• background job ƒë∆∞·ª£c ch·∫°y sau khi data tr·∫£ v·ªÅ cho ng∆∞·ªùi d√πng, v√† d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ places
    // n·∫øu th·∫±ng places b·ªã bi·∫øn ƒë·ªïi th√¨ th·∫±ng background job n√†y s·∫Ω l·∫•y d·ªØ li·ªáu b·ªã bi·∫øn ƒë·ªïi ƒë√≥ ƒëem ƒëi x·ª≠ l√Ω
    // do m√¨nh mu·ªën d√πng d·ªØ li·ªáu c≈© n√™n ph·∫£i cloneDeep d·ªØ li·ªáu khi tr·∫£ v·ªÅ
    let placesClone = cloneDeep(places)

    placesClone.map(place => place.photos && photosToReturn.push({
      height: Math.floor(place.photos[0].height/2),
      width: Math.floor(place.photos[0].width/2),
      photo_reference: place.photos[0].photo_reference
    }))
    // console.log('üöÄ ~ file: map.service.js:32 ~ getPlacesTextSearch ~ photosToReturn', photosToReturn)

    // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
    await axios.all(
      photosToReturn.map(photoReference => axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=${photoReference.width}&maxheight=${photoReference.height}&photo_reference=${photoReference.photo_reference}&key=${env.MAP_API_KEY}`, { responseType: 'arraybuffer' }))
    ).then(
      (datas) => {
        let photos = []
        datas.map(res => {
          const urlBase64Decode = Buffer.from(res.data, 'binary').toString('base64')
          photos.push(urlBase64Decode)
        })

        placesClone.map((place) => {
          if (photos.length === 0)
            return
          if (place.photos) {
            place.photos = [photos[0]]
            photos.shift()
          }
        })
      }
    ).catch(err => console.log('L·ªói ·ªü g·ªçi api ƒë·ªÉ l√† photos => base64', err))

    const location = {
      lat: data.location.latitude,
      lng: data.location.longitude
    }

    if (sortBy === FilterConstants.sortBy.PROMINENCE || sortBy === FilterConstants.sortBy.NEAR_BY) {
      const resultFilterRadius = filterRadiusProminenceOrNearBy(placesClone, location, parseInt(data.radius))
      placesClone = resultFilterRadius.arrPlace
      if (resultFilterRadius.isDeleteNextPageToken)
        nextPageToken = null
    } else if (sortBy === FilterConstants.sortBy.STAR_LOW_TO_HIGH) {
      placesClone = sortByStarLowToHigh(placesClone)
    } else if (sortBy === FilterConstants.sortBy.STAR_HIGH_TO_LOW) {
      placesClone = sortByStarHighToLow(placesClone)
    } else if (sortBy === FilterConstants.sortBy.RATING_LOW_TO_HIGH) {
      placesClone = sortByRatingLowToHigh(placesClone)
    } else if (sortBy === FilterConstants.sortBy.RATING_HIGH_TO_LOW) {
      placesClone = sortByRatingHighToLow(placesClone)
    }
    console.log('üöÄ ~ file: map.service.js:241 ~ getPlacesTextSearch ~ placesClone:', placesClone?.length)
    console.log('üöÄ ~ file: map.service.js:241 ~ getPlacesTextSearch ~ nextPageToken:', nextPageToken)

    return {
      arrPlace: placesClone,
      nextPageToken: nextPageToken
    }

  } catch (error) {
    throw new Error(error)
  }
}

const getPlaceDetails = async (data) => {
  // data c√≥ d·∫°ng:
  // data = {
  //   placeId: 'XXXXXXXXXX',
  //   h√†m n√†y ƒë·ªÉ ki·ªÉm tra xem tr√™n FE c√≥ ƒëang b·∫•m v√†o Poiclick tr√™n n·ªÅn t·∫£ng android hay kh√¥ng
  //   androidPoiClick: true
  // }
  console.log('üöÄ ~ file: map.service.js:256 ~ getPlaceDetails ~ data:', data)
  try {
    let placeTranform, placeTranformReturn, existPlace
    // Ki·ªÉm tra trong database xem c√≥ place_id n√†y ch∆∞a
    if (data?.androidPoiClick) {
      const placeIdClone = cloneDeep(data.placeId)
      // T√°ch 4 k√Ω t·ª± ƒë·∫ßu ti√™n
      const firstString = placeIdClone.slice(0, 4)

      // T√°ch 12 k√Ω t·ª± cu·ªëi c√πng
      const lastString = placeIdClone.slice(-12)

      existPlace = await MapModel.findOneByPlaceIdStartEnd(firstString, lastString)
    } else {
      existPlace = await MapModel.findOneByPlaceId(data.placeId)
    }
    console.log('üöÄ ~ file: map.service.js:294 ~ getPlaceDetails ~ existPlace:', existPlace)
    if (!existPlace || existPlace.length === 0) {
      // L·∫•y d·ªØ v·ªÅ place details tr√™n google map
      const result = await PlacesSearchProvider.getPlaceDetailsAPI({
        place_id: data.placeId
      })

      placeTranform = cloneDeep(result.result)
      placeTranformReturn = cloneDeep(result.result)

      // Bi·∫øn ƒë·ªïi c√°c photo c√≥ Db th√†nh img64
      // C√≥ th·ªÉ x·∫£y ra TH l√† kh√¥ng c√≥ photos n·ªØa n√™n c·∫ßn ph·∫£i check k·ªπ
      const photosClone = cloneDeep(placeTranform.photos)
      delete placeTranform.photos
      if (photosClone) {
        let photosReference = []

        photosClone.map(photo => photosReference.push({
          height:  Math.floor(photo.height),
          width:  Math.floor(photo.width),
          photo_reference: photo.photo_reference
        }))

        // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
        await axios.all(
          photosReference.map( photoReference => axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=${photoReference.width}&maxheight=${photoReference.height}&photo_reference=${photoReference.photo_reference}&key=${env.MAP_API_KEY}`, { responseType: 'arraybuffer' }))
        ).then(
          async (datas) => {
            let photoBuffers = []
            datas.map(res => photoBuffers.push(res.data))
            console.log('s·ªë photos c·ªßa place photos buffer:', photoBuffers.length)

            let resPhotos = await CloudinaryProvider.streamUploadMutiple(photoBuffers, 'place_photos')
            let photosUrlToUpdate = []

            resPhotos.map(res => photosUrlToUpdate.push(res.url))
            console.log('S·ªë photos c·ªßa place photos khi ƒë·∫©y l√™n cloudinary:', photosUrlToUpdate.length)
            // photosToUpdate s·∫Ω c·∫≠p nh·∫≠t v√†o database
            // Kh√¥ng c·∫ßn ch·ªù n√†o xong n√≥ t·ª± create trong DB
            const photosUpdated = await PhotosModel.createNew({
              place_photos_id: placeTranform.place_id,
              photos: photosUrlToUpdate
            })
            //  th√™m tr∆∞·ªùng photoId trong
            placeTranform.photos_id = photosUpdated.insertedId.toString()
            placeTranformReturn.photos = photosUrlToUpdate

          }
        ).catch(err => console.log(err))
      }

      const reviewsClone = cloneDeep(placeTranform.reviews)
      delete placeTranform.reviews
      if (reviewsClone) {
        let profilePhotosReference = []
        reviewsClone.map(review => profilePhotosReference.push(review.profile_photo_url))
        // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
        await axios.all(
          profilePhotosReference.map( photoReference => axios.get(photoReference, { responseType: 'arraybuffer' }))
        ).then(
          async (datas) => {
            let photoBuffers = []
            datas.map(res => photoBuffers.push(res.data))
            console.log('s·ªë photos c·ªßa place reviews buffer:', photoBuffers.length)

            let resPhotos = await CloudinaryProvider.streamUploadMutiple(photoBuffers, 'place_reviews')
            console.log('S·ªë photos c·ªßa place reviews khi ƒë·∫©y l√™n cloudinary:', resPhotos.length)

            reviewsClone.map((review, index) => review.profile_photo_url = resPhotos[index].url)


            // photosToUpdate s·∫Ω c·∫≠p nh·∫≠t v√†o database
            const photosUpdated = await ReviewsModel.createNew({
              place_reviews_id: placeTranform.place_id,
              reviews: reviewsClone
            })
            //  th√™m tr∆∞·ªùng photoId trong placeTranform
            placeTranform.reviews_id = photosUpdated.insertedId.toString()
            placeTranformReturn.reviews = reviewsClone
          }
        ).catch(err => console.log(err))
      }
      // Phuong: oke l∆∞u v√†o db th√¥i. Kh√¥ng c·∫ßn ƒë·ª£i
      MapModel.createNew(placeTranform)
    } else if (existPlace || existPlace.length !== 0) {
      console.log('N∆°i n√†y ƒë√£ t·ªìn t·∫°i!')
      if (data?.androidPoiClick) {
        placeTranformReturn = existPlace[0]
      } else {
        placeTranformReturn = existPlace
      }
      // b√¢y gi·ªù trong placeTranformReturn thi·∫øu photos v·ªõi reviews n√™n l·∫•y hai th·∫±ng ƒë√≥ v·ªÅ th√¥ng qua place_id
      const photosReturn = await PhotosModel.findOneByPlaceId(placeTranformReturn.place_id)
      // console.log('üöÄ ~ file: map.service.js:396 ~ getPlaceDetails ~ photosReturn:', photosReturn)
      const reviewsReturn = await ReviewsModel.findOneByPlaceId(placeTranformReturn.place_id)
      // console.log('üöÄ ~ file: map.service.js:398 ~ getPlaceDetails ~ reviewsReturn:', reviewsReturn)
      if (photosReturn)
        placeTranformReturn.photos = photosReturn.photos
      if (reviewsReturn)
        placeTranformReturn.reviews = reviewsReturn.reviews
    }
    // Sau ƒë√≥ tr·∫£ v·ªÅ cho user thoy
    return placeTranformReturn

  } catch (error) {
    // console.log(error)
    throw new Error(error)
  }
}

const getWeatherCurrent = async (data) => {
  console.log('üöÄ ~ file: map.service.js:420 ~ getWeatherCurrent ~ data:', data)
  // data = {
  //   longitude: '',
  //   latitude: ''
  // }
  try {
    const weatherData = await OpenWeatherProvider.getWeatherCurrent(data)
    return weatherData
  } catch (error) {
    throw new Error(error)
  }
}

const getWeatherForecast = async (data) => {
  console.log('üöÄ ~ file: map.service.js:420 ~ getWeatherForecast ~ data:', data)
  // data = {
  //   longitude: '',
  //   latitude: ''
  // }
  try {

    // https://blog.logrocket.com/using-axios-all-make-concurrent-requests/
    const promises = []
    let result = {}
    // Duy·ªát qua c√°c ID v√† th√™m v√†o danh s√°ch promise
    for (let i=0; i<3; i++) {
      let promise

      if (i === 0) {
        const params = {
          lat: data.latitude,
          lon: data.longitude,
          units: 'metric',
          lang: env.LANGUAGE_CODE_DEFAULT,
          appid: env.OPEN_WEATHER_API_KEY
        }

        promise = axios.get(`${env.OPEN_WEATHER_BASE_URL}/data/2.5/weather`, { params })
      } else if (i === 1) {
        const params = {
          lat: data.latitude,
          lon: data.longitude,
          limit: 1,
          appid: env.OPEN_WEATHER_API_KEY
        }

        promise = axios.get(`${env.OPEN_WEATHER_BASE_URL}/geo/1.0/reverse`, { params })
      } else {
        const params = {
          lat: data.latitude,
          lon: data.longitude,
          units: 'metric',
          cnt: 40, // number of list (maximum 40 item ~ 5 days)
          lang: env.LANGUAGE_CODE_DEFAULT,
          appid: env.OPEN_WEATHER_API_KEY
        }

        promise = axios.get(`${env.OPEN_WEATHER_BASE_URL}/data/2.5/forecast`, { params })
      }

      promises.push(promise)
    }

    await axios.all(promises).then((responses) => {
      responses.map((res, index) => {
        if (index === 0) {
          // d·ªØ li·ªáu weather hi·ªán t·∫°i
          result.weatherCurrent = res.data
        } else if (index === 1) {
          // geocoding reverse location
          result.nameGeocoding = res.data[0].name
        } else {
          // weather forecast
          result.weatherForecast = res.data.list
        }
      })
    }
    ).catch(err => console.log('L·ªói ·ªü g·ªçi api openweather', err))

    return result
  } catch (error) {
    throw new Error(error)
  }
}

const getGeocodingReverse = async (data) => {
  console.log('üöÄ ~ file: map.service.js:420 ~ getGeocodingReverse ~ data:', data)
  // data = {
  //   longitude: '',
  //   latitude: ''
  // }
  try {
    const weatherData = await OpenWeatherProvider.getGeocodingReverse(data)
    return weatherData
  } catch (error) {
    throw new Error(error)
  }
}

export const MapService = {
  getPlaces,
  getPlacesWithPipeline,
  getPlaceDetailWithPipeline,
  getPlacesTextSearch,
  getPlaceDetails,
  getWeatherCurrent,
  getWeatherForecast,
  getGeocodingReverse
}
